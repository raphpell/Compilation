<html>
	<head>
		<title>Comparaison des LexerNodes</title>
		<link rel="stylesheet" type="text/css" href="widget/Stats/styles.css">
		<style>
CODE, PRE {
	background: #EEE;
	color: #000;
	display: block;
	font-weight: bold;
	}
H2, H3 {
	background: #EEE;
	border-bottom: 4px solid #666;
	margin: 0;
	padding: .25em;
	}
B {
	font-size: 1.2em;
	}
DIV {
	margin: 0 0 1em;
	}
TABLE {
	font-family: 'Monaco','Menlo','Ubuntu Mono','Consolas','source-code-pro',monospace !important;
	}
FIELDSET {
	float: right;
	}
FIELDSET DL {
	margin: 0;
	}
		</style>
	</head>
<body>

<a href="index.htm">Index</a>
<h1>Comparaison des LexerNodes</h1>

<p>
	Les differents objets sont censés répondre aux mêmes tests unitaires.
	Le temps d'execution est la seule chose observée ici.
</p>

<input type="button" id="eTest" onclick="UnitTest()" value="test">
<input type="input" id="eRepeat" value="10" size="3"> fois


<fieldset><legend>Attributs</legend>
	<dl id="eAttributes">
		<dt><input id="eNow" type="checkbox"><label for="eNow">now</label></dt>
		<dt><input id="eMin" type="checkbox"><label for="eMin">min</label></dt>
		<dt><input id="eMoy" type="checkbox" checked><label for="eMoy">moy</label></dt>
		<dt><input id="eMax" type="checkbox"><label for="eMax">max</label></dt>
		<dt><input id="eTot" type="checkbox"><label for="eTot">tot</label></dt>
		<dt><input id="eSum" type="checkbox"><label for="eSum">sum</label></dt>
	</dl>
</fieldset>

<table border="1" id="eTABLE"></table>


<script src="js/framework.js"></script>
<script src="js/shared.js"></script>
<script src="js/lexer.node.object.js"></script>
<script src="js/lexer.node.simple.js"></script>

<!-- Lexeme -->
<script>
var Lexeme
, createLexerNode =function( sNodeType ){
	var s
	switch( sNodeType ){
		case 'HTMLElement': s='document.createElement(o.token)'; break;
		case 'ObjectNode': s='new Node (o.token)'; break;
		case 'SimpleNode': s='new SimpleNode (o.token)'; break;
		case 'EmptyObject': s='new EmptyObject (o.token)'; break;
		default: throw Error ('Invalid Lexeme Type.')
		}
	Lexeme = new Function ( 'o', 
		'var m = '+ s +';'
		+'m.oValue=o;'
		+'return m;'
		)
	}
	
EmptyObject=(function(){ // C'est pas une solution !
	var OO =function(){}
	OO.prototype ={
		// Lexer
		nodeName:null,
		nodeType:null,
		parentNode:null,
		firstChild:null,
		lastChild:null,
		previousSibling:null,
		nextSibling:null,
		appendChild: function(){},
		getElementsByTagName:function(){},
		hasChildNodes: function(){},
		removeChild: function(){},
		// Incremental Lexer
		insertBefore: function(){}
		}
	return OO
	})()
</script>

<!-- Stats -->
<script src="widget/Stats/scripts.js"></script>
<script>
_('eAttributes,eNow,eMin,eMoy,eMax,eTot,eSum')
Stats.print.union({
	now: eNow.checked,
	min: eMin.checked,
	moy: eMoy.checked,
	max: eMax.checked,
	tot: eTot.checked,
	sum: eSum.checked
	})
Stats.getTime =function( n ){
	return (n*1000).toFixed(2) +' µs'
	}
Stats.getName =function( sNodeType, nId ){
	return sNodeType + nId
	}
var displayAttr =function( evt ){
	var e = Events.element( evt )
	Stats.print[ e.nextSibling.innerHTML ] =  e.checked
	UnitTest()
	eTest.focus()
	}
Events.add( 'click',
	eNow, displayAttr,
	eMin, displayAttr,
	eMoy, displayAttr,
	eMax, displayAttr,
	eTot, displayAttr,
	eSum, displayAttr
	)
</script>

<script>
_('eTest,eRepeat,eTABLE')
var oChrono = new Chrono (), oResult
var aLexerNodeType = ['HTMLElement','ObjectNode','SimpleNode'] // ,'EmptyObject'

var CompareTests =function( nId ){
	var a = Array.merge( aLexerNodeType, [])
	for(var i=0; a[i]; i++) a[i] = Stats.getName(a[i], nId )
	for(var i=0, ni=a.length; i<ni; i++){
		if( _( a[0] )) _( a[0]).innerHTML = Stats.compare.apply( Stats, a )
		a.push( a.shift())
		}
	}

var aTests =(function(){
	var o1, o2, o3
	return [
		{name:'new',test:function(){ o1 = Lexeme ({token:'STRING'}) }},
		{name:'',test:function(){ o2 = new Lexeme ({token:'STRING'}) }},
		{name:'',test:function(){ o3 = new Lexeme ({token:'STRING'}) }},
		{name:'appendChild',test:function(){ o1.appendChild( o2 ) }},
		{name:'',test:function(){
			var nChild = 5
			var nDepth = 3
			var appendNodes=function( oP, n ){
				if( n<nDepth )
					for(var i=0; i<nChild; i++ )
						oP.appendChild(
							appendNodes( Lexeme({ token:'STRING'+ (i>1?i:'') }), n+1 )
							)
				return oP
				}
			appendNodes( o1, 0 )
			}},
		{name:'getElementsByTagName',test:function(){
			o1.lastChild.getElementsByTagName('STRING')
			}},
		{name:'hasChildNodes',test:function(){ o1.hasChildNodes() }},
		{name:'insertBefore',test:function(){ o1.insertBefore( o3, o2 ) }},
		{name:'removeChild',test:function(){ o1.removeChild( o2 ) }},
		{name:'',test:function(){ o1 = o2 = o3 = null }}
		]
	})()

UnitTest=function(){
	var nLimit = eRepeat.value
	for(var j=0; aLexerNodeType[j]; j++){
		var sNodeType = aLexerNodeType[j]
		createLexerNode( sNodeType )
		for(var i=0; i<nLimit; i++)
			for(var k=0; aTests[k]; k++)
				UnitTest.test( Stats.getName( sNodeType, k ), k )
		}
	UnitTest.show()
	}
UnitTest.init =function( sNodeType, nId ){
	var eTR = Tag('TR'), eTH
	for(var j=0; aLexerNodeType[j]; j++){
		var sNodeType = aLexerNodeType[j]
		eTH = eTR.appendChild( Tag('TH', {
			id:'e'+sNodeType,
			innerHTML:'<h2>'+sNodeType+'</h2>'
			}))
		}
	eTABLE.appendChild( eTR )
	
	for(var k=0; aTests[k]; k++){
		if( aTests[k].name ){
			eTABLE.appendChild( Tag('TR', { innerHTML:'<th colspan="'+ aLexerNodeType.length +'"><h3><code>'+ aTests[k].name +'</code></h3></th>' }))
			eTR = Tag('TR')
			for(var j=0; aLexerNodeType[j]; j++){
				eTR.appendChild( Tag('TD', { id: Stats.getName( aLexerNodeType[j], k )}))
				}
			eTABLE.appendChild( eTR )
			}
		}
					
	}
UnitTest.test =function( sName, nId ){
	var nTime
	oChrono.start()
	aTests[nId].test()
	nTime = oChrono.stop()
	Stats.set( sName, nTime )
	}
UnitTest.show =function(){
	for(var i=0; aTests[i]; i++) CompareTests( i )
	}
	
UnitTest.init()
UnitTest()

var nTime=0
var nInterval = setInterval(
	function(){
		if( ++nTime == 20 ) clearInterval( nInterval )
		else UnitTest()
	}, 200 )
eTest.focus()
</script>

</body>
</html>