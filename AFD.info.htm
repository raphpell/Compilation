<!DOCTYPE HTML>
<html>
	<head>
		<title>AFD</title>
		<link rel="stylesheet" type="text/css" href="widget/Toc/styles.css">
		<style>
SECTION { margin-left: 1em;}
		</style>
	</head>
	<body>
	
<dl class="menu">
	<dt><a href="index.htm">Index</a></dt>
	<dt><h3>Sommaire</h3></dt>
	<dt><a href="#toc1">Préambule</a></dt>
	<dt><a href="#toc2">Conversion AFN en AFD</a></dt>
		<dd><dl>
			<dt><a href="#toc21">&epsilon;-Closure</a></dt>
		</dl></dd>
	<dt><a href="#toc3">Minimisation</a></dt>
		<dd><dl>
			<dt><a href="#toc31">Nombre d'états</a></dt>
			<dt><a href="#toc32">Alphabet</a></dt>
		</dl></dd>
	<dt><a href="#toc4">Résolution des ambiguïtés</a></dt>
</dl>
<p id="back-top"><a href="#"><span></span>Haut de page</a></p>


<h1>AFD</h1>


<a name="toc1"></a>
<h2>Préambule</h2><section>
	<p>
		Un AFD reconnait un ou plusieurs tokens.<br>
		Il est créé depuis un AFN généré depuis une ER, ou par aggrégation d'AFD.
	</p>
	<p>
		AFD = <a href="AF.info.htm">Automate Fini</a> Déterministe<br>
		( DFA = Determinist Finite Automaton )
	</p>
	<ul>
		<li>a au maximum une transition pour un état et un symbole.</li>
		<li>n'a pas de transition &epsilon;.</li>
	</ul>
</section>

<a name="toc2"></a>
<h2>Conversion AFN en AFD</h2><section>
	<ul>
		<li>Un état du AFD correspond à des groupes d'états du AFN.</li>
		<li>	
			L'<b>état initial</b> du AFD est égale à l'&epsilon;-Closure de l'état initial du AFN.
		</li>
		<li>
			Pour chaque nouvel état du AFD et chaque symbole de l'alphabet : <br>
			Une transition (s<sub>dfa1</sub>,c)&rarr;s<sub>dfa2</sub> est ajouté si s<sub>dfa2</sub> &ne; &empty; <br>
			s<sub>dfa2</sub> est l'ensemble d'état du AFN accessible depuis s<sub>dfa1</sub> après avoir lu le symbole c, en considérant aussi les transitions &epsilon;.
		</li>
		<li>
			Un état du AFD est un <b>état final</b> si il contient un état final du AFN.
		</li>
	</ul>

	<a name="toc21"></a>
	<h3>&epsilon;-Closure </h3><section>
		<p>l'&epsilon;-Closure d'un état du AFN contient :</p>
		<ul>
			<li>cet état.</li>
			<li>tous les états accessibles par des transitions &epsilon; depuis cet état.</li>
		</ul>
	</section>
</section>

<a name="toc3"></a>
<h2>Minimisation</h2><section>
	<a name="toc31"></a>
	<h3>Nombre d'états</h3><section>
		<ol>
			<li>On commence avec une partition initiale <code>&Pi;</code> composé d'au moins deux groupes :
				<ul>
					<li>Les états finaux F reconnaissant un type de token (plusieurs groupes possibles).</li>
					<li>Le reste des états S&ndash;F.</li>
				</ul>
			</li>
			<li>Appliqué la procédure suivante pour créer une nouvelle partition :
	<pre>
	&Pi;<sub>new</sub> = &Pi;
	PourChaque( groupe G de &Pi;<sub>new</sub> )
		partagé groupe G en sous-groupe de façon à ce que
			deux états sont dans le même sous-groupe si et seulement si
			pour tous les symboles, ces états pointent vers le même groupe de &Pi;
		replacé G dans &Pi;<sub>new</sub> par l'ensemble des sous-groupes formé
	</pre>
			</li>
			<li>Répété tant que quand <code>&Pi;<sub>new</sub></code> est différent de <code>&Pi;</code>  </li>
			<li>
				Créé un nouveau DFA avec comme états la partition obtenue.
			</li>
		</ol>
	</section>
	<a name="toc32"></a>
	<h3>Alphabet</h3><section>
		<p>Les symboles ayant des colonnes identiques dans la matrice sont regroupés dans un ensemble de caractères.</p>
		<p>DFA avant et après réduction de l'alphabet:</p>
		<table border="1" style="float:left;">
		<tr><td><pre>   \Symbole<br>Etat\</pre></td><th>a</th><th>b</th><th>c</th><th>d</th></tr>
		<tr><th style="background:#6FB1FC;">1</th>	<td>2</td><td>2</td><td>2</td><td>4</td></tr>
		<tr><th style="background:       ;">2</th>	<td>2</td><td>2</td><td>2</td><td>3</td></tr>
		<tr><th style="background:#FC0   ;">3</th>	<td>2</td><td>2</td><td>2</td><td>4</td></tr>
		<tr><th style="background:       ;">4</th>	<td>2</td><td>2</td><td>2</td><td>4</td></tr>
		</table>
		<table border="1" style="float:left; margin-left:2em;">
		<tr><td><pre>   \Symbole<br>Etat\</pre></td><th>[abc]</th><th>d</th></tr>
		<tr><th style="background:#6FB1FC;">1</th>	<td>2</td><td>4</td></tr>
		<tr><th style="background:       ;">2</th>	<td>2</td><td>3</td></tr>
		<tr><th style="background:#FC0   ;">3</th>	<td>2</td><td>4</td></tr>
		<tr><th style="background:       ;">4</th>	<td>2</td><td>4</td></tr>
		</table>
		<div style="clear:both;"></div>
	</section>
</section>

<a name="toc4"></a>
<h2>Résolution des ambiguïtés</h2><section>
	<ol>
		<li>La chaîne trouvée sera toujours la plus longue possible.</li>
		<li>Priorité des régles : Si la chaîne trouvée reconnaît deux tokens. Premier arrivé, premier servi !</li>
	</ol>

	<p>Exemple d'implémentation recherchant la plus grande chaîne pouvant être trouvée:</p>
	<pre>
	function match( oDFA, sText, nIndex ){
		var nState = oDFA.I, nStartIndex, nCurrentIndex, oMatched
		nStartIndex = nCurrentIndex = nIndex || 0
		while( nState = oDFA.nextState( nState,  sText.charAt( nCurrentIndex++ ))){
			if( oDFA.haveFinalState( nState )){
				oMatched={ start:nStartIndex, end:nCurrentIndex }
				}
			}
		return oMatched
		}
	</pre>

	<p>Premier arrivé...</p>
	<pre>
	function searchToken( aTokens, sText, nIndex ){
		var oMatched
		for(var i=0; aTokens[i]; i++ )
			if( oMatched = match( aTokens[i], sText, nIndex ))
				return oMatched // ...first found
		}
	</pre>
</section>

<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.3/jquery.min.js"></script>
<script type="text/javascript" src="widget/Toc/jquery.js"></script>
</body>
</html>