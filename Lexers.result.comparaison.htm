<!DOCTYPE HTML>
<html>
<head>
	<title>Comparaison des résultats</title>
	<link rel="stylesheet" type="text/css" href="css/styles.css">
	<style>
	.myNode {
		box-shadow: 2px 2px 2px #999;
		border: 1px solid #CCC;
		display: inline-block;
		margin: 2px;
		padding: 2px 0;
		text-align: center;
		}
	.tokens { white-space: normal; }
	.w50 {
		float: left;
		margin-bottom: 2em;
		text-align: center; 
		width: 49.8%;
		}
	.w100 {
		margin: 1em;
		text-align: center; 
		}
	TEXTAREA {
		width: 100%;
		}
	h2, h3 { text-align: center; clear: both; }
	h2, h3 { margin:0; padding:0.25em 0 0 0; background: #000; color: #FFF; }
	h3 { color: #FF0; font:normal 1em Verdana; padding:0 0 0.5em 0; }
	h4 { margin:0 0 1em 0; }
	#eRegExp { text-align: center; }
	</style>
</head>
<body spellcheck="false">
<a href="index.htm">Index</a>

<h1>Comparaison des résultats</h1>

<p>
	<label for="eRegExpLexer">RegExp Lexer :</label>
	<select id="eRegExpLexer">
		<option value="OneRegExpLexer">“1 RegExp”</option>
		<option value="MultiRegExpLexer" selected>Multiple RegExp</option>
	</select>
</p>

<h2>Expressions régulières</h2>
<h3>ONE LEVEL LEXER</h3>
<div class="w100">
	<label for="eRegExpList">Exemples : </label>
	<select id="eRegExpList"></select><br>
	<label for="eRegExp">Source : </label>
	<textarea id="eRegExp">"[^"\\\r\n]*(\\.[^"\\\r\n]*)*"</textarea>
	<hr>
	<label>Benchmark sur <input type="number" id="eRepeatTest1" min="1" max="100" value="100" size="3"> exécution(s).</label><br>
	<input type="button" value="Répéter automatiquement" onclick="this.value=this.value=='Arrêter'?'Lancer':'Arrêter'; benchmark1()">
</div>
<div class="w50"><h4>RegExp Lexer</h4>
	<input type="button" value="Benchmark" onclick="getTokens1()">
	<pre id="eChrono1" class="tokens">...</pre>
	<pre id="eRegExpResult1" class="tokens"></pre>
</div>
<div class="w50"><h4>Automaton Lexer</h4> 
	<input type="button" value="Benchmark" onclick="getTokens2()">
	<pre id="eChrono2" class="tokens">...</pre>
	<pre id="eRegExpResult2" class="tokens"></pre>
</div>

<h2>JavaScript + PHP</h2>
<h3>MULTI LEVEL LEXER</h3>
<div class="w100">
	<dl>
		<dt><label for="eSyntax">Syntaxe : </label>
			<select id="eSyntax"></select>
		</dt>
		<dt><label for="eText">Source</label>
<textarea id="eText">
/* 1 - JavaScript syntax */ aaa */
	variable n = nInt1/4 + 4/nInt1++ || 10 
	var oEditor = new EditorSample ( eContent ,{
		// a single line comment ( a single quote ' )
		aArray : [ true , false , null , undefined , Infinity , NaN ],
		sDoubleQuoteString : "/* ' a multi line comment */ // a single line comment " ,
		sSingleQuoteString : '/* "\
			a multi line string */ // a single line comment '
		sBracketsTest1_1 : "{[(",
		sBracketsTest1_2 : "}])",
		/*
		a  multi line comment ( a double quote " )
		*/
		})
	RegExp.extend({
		escape :function( s ){
			// Bracket test 2
			var re1 = /(\.|\?|\*|\+|\\|\(|\)|\[|\]|\}|\{|\$|\^|\|)/g
			, re2 = /("|'| |\t)/gm
			return s.replace( re1 , "\\$1" )
			}
		})

/* 2 - PHP */
	<?php
	function phpSafe ( $strText ){
		// a single line comment ( a double quote ")
		$tmpString = $strText ;
		$tmpString = str_replace( chr(92) , "" , $tmpString ); 
		returning rawurldecode( $tmpString );
		}
		
	/*
	a  multi line comment ( a single quote ' )
	*/
	$hiddencontent = phpSafe( $_POST[ 'content' ]);
	?>
</textarea>
		</dt>
	</dl>
	
	<hr>
	<label>Benchmark sur <input type="number" id="eRepeatTest2" min="1" max="10" value="1" size="2"> exécution(s).</label><br>
	<input type="button" value="Répéter automatiquement" onclick="this.value=this.value=='Arrêter'?'Lancer':'Arrêter'; benchmark2()">
</div>
<div class="w50"><h4>RegExp Lexer</h4>
	<input type="button" value="Benchmark" onclick="getTokens3()">
	<pre id="eChrono3" class="tokens">...</pre>
	<pre id="eRegExpResult3" class="tokens"></pre>
</div>
<div class="w50"><h4>Automaton Lexer</h4>
	<input type="button" value="Benchmark" onclick="getTokens4()">
	<pre id="eChrono4" class="tokens">...</pre>
	<pre id="eRegExpResult4" class="tokens"></pre>
</div>

<!-- FRAMEWORK... -->
<script src="js/framework.js"></script>
<script src="js/shared.js"></script>
<script src="widget/Stats/scripts.js"></script>
<script>
var benchmark1 =benchmark( function(){ getTokens1(); getTokens2(); compareResult( eRegExpResult1, eRegExpResult2 ); })
var benchmark2 =benchmark( function(){ getTokens3(); getTokens4(); compareResult( eRegExpResult3, eRegExpResult4 ); })
</script>

<!-- LEXERS -->
<script>
var TokensBridge ={
	'MLC':'COMMENT',
	'SLC':'COMMENT',
	'SSQ':'STRING',
	'SDQ':'STRING'
	}
var TokensLabel ={
	'INI_COMMENT':'',
	'JS':'',
	'REGULAR_EXPRESSION':'',
	'SimpleRegExp':'',
	'PHP':'',
	'MLC':'',
	'COMMENT':'',
	'STRING':'',
	'S_MLC':'/*',
	'MLC_IN':'\u2026',
	'E_MLC':'\u2026*/',
	'SLC':'',
	'S_SLC':'//',
	'SLC_IN':'\u2026',
	'SDQ':'',
	'SDQ_IN':'\u2026',
	'SSQ':'',
	'SSQ_IN':'\u2026',
	'BACKSLASH':'\\',
	'NEW_LINE':'\u2424',
	'WHITE_SPACES':'\u2423',
	'TAB':'\u2423',
	'SPACES':'\u2420',
	'NUMBER':'\u24C3',
	'REGULAR_EXPRESSION_IN':"\u24C7",
	'NOT_WHITE_SPACES':'\u2620',
	'UNDEFINED':'\u262F',
	'DOUBLE_QUOTE':'"',
	'SINGLE_QUOTE':"'",
	'LPAREN':'(',
	'RPAREN':')',
	'LBRACK':'[',
	'RBRACK':']',
	'BRACE':' ',
	'LBRACE':'{',
	'RBRACE':'}',
	'ELISION':',',
	'QUESTION':'?',
	'DOT':'.',
	'SEMI':';',
	'COLON':':',
// PHP
	'S_PHP':-1,
	'E_PHP':-1,
	'PHP_FUNCTION':"\u24BB",
	'PHP_LITERAL':-1,
	'PHP_KEYWORD':"\u24C0",
	'PHP_RESERVED':"\u24C0",
	'PHP_SPECIAL_VARS':"\u24C0",
	'PHP_IDENTIFIER':"\u24BE",
	'PHP_ARITHMETIC_OP': -1, // '\u24C4p',
	'PHP_ASSIGNMENT_OP': -1,
	'PHP_BITWISE_OP': -1,
	'PHP_COMPARISON_OP': -1,
	'PHP_ERROR_CONTROL_OP': -1,
	'PHP_LOGICAL_OP': -1,
	'PHP_STRING_OP': -1,
	'PHP_TYPE_OP': -1,
	
// JS
	'JS_LITERAL':"\u24C1",
	'JS_IDENTIFIER':"\u24BE",
	'JS_KEYWORD':"\u24C0",
	'JS_ARITHMETIC_OP': -1,
	'JS_ASSIGNMENT_OP': -1,
	'JS_COMPARISON_OP': -1,
	'JS_LOGICAL_OP': -1,
	'JS_UNARY_OP': -1,
	
// TXT
	TXT:'',
	
// INI
	INI:'',
	INI_VAR:'\u24BE',
	INI_KEYWORD:'\u24C0',
	INI_SECTION:'', S_INI_SECTION:'[', E_INI_SECTION:']', SECTION_PART:'s',
	S_INI_COMMENT:';',
	INI_COMMENT_IN:'c',
	INI_SSQ:'', S_INI_SSQ:'\'', E_INI_SSQ:'\'', INI_SSQ_IN:'\u2026',
	INI_SDQ:'', S_INI_SDQ:'"', E_INI_SDQ:'"', INI_SDQ_IN:'\u2026',
	VALUES:'', INI_VALUE_IN:'v',
	OPERATOR:'=',
	
// CSS
	CSS:'',
	CSS_NUMBER:"\u24C3",
	DIMENSIONS:"\u24B9",
	PROP_VALUE:'',
	RULE_SET:'',
	ATTRIBUTE_SELECTOR:'',
	PSEUDO:'', S_PSEUDO:':',
	FUNCTION:'',S_FUNCTION:'F(',E_FUNCTION:')',
	IDENT:"\u24BE", HASH:-1, CLASS:-1,
	URL: '', S_URL: -1, E_URL: -1,
	ATKEYWORD: -1,
	COMBINATOR: -1,
	ATTRIBUTE_OPERATOR: -1,
	IMPORTANT:'', S_IMPORTANT:-1, E_IMPORTANT:-1,
	
// CSS
	HTML:'',
	DOCTYPE:'', S_DOCTYPE:'<!DOCTYPE', E_DOCTYPE:'>', DOCTYPE_IN:'\u24E5',
	TAG:'', S_TAG:'<', E_TAG:'>',
		ELT:'', S_ELT:-1,
		TAG_ATTR:-1, TAG_ATTR_VALUE:'',
	END_TAG:'', S_END_TAG:'</', E_END_TAG:'>',
		END_ELT:-1,
	HTML_COMMENT:'', S_HTML_COMMENT:'<!--', HTML_COMMENT_IN:'\u2026', E_HTML_COMMENT:"-->",
	HTML_TEXT:'\u2026',
	HTML_STYLE:'', S_HTML_STYLE:-1,
		HTMLStyle:'', S_HTMLStyle:-1,
		END_HTML_STYLE:-1,
	HTML_SCRIPT:'', S_HTML_SCRIPT:-1,
		HTMLScript:'', S_HTMLScript:-1,
		END_HTML_SCRIPT:-1,
	HTML_SDQ:'', S_HTML_SDQ:'"', E_HTML_SDQ:'"', HTML_SDQ_IN:'\u2026',
	HTML_SSQ:'', S_HTML_SSQ:"'", E_HTML_SSQ:"'", HTML_SSQ_IN:'\u2026',
	EQUAL:'='
	}

var valueToString =function(o){ // token,css,
	return JSON.stringify( o, 'rule,index,lineStart,lineEnd,bParent,bParentLimit,bRescan,css'.split(','), " " ).str_replace('"', '')
	}
var setTitle =function(){
	var o = this.oValue
	if( ! o ) console.warn(this)
	this.title = o.token
		+ '\n\u25B6'+o.value+'\u25C0'
		+ valueToString( o )
	}
var Lexeme =function( o ){
	var e = document.createElement('B')
	, sToken = TokensBridge[o.token] || o.token
	, sValue = o.value
	e.oValue = o
	
	if( Lexeme[o.rule]) Lexeme[o.rule]( e, sToken, sValue )
		else Lexeme.parent( e, sToken, o )
		// else e.symbol = e.title = sValue
	if( e.symbol ) e.innerHTML = e.symbol.str_replace( ['&','<','>'], ['&amp;','&lt;','&gt;'])
	if( o.css ) e.className = o.css + ' myNode'
	
	return e
	}
Lexeme.SimpleRegExp =function( e, sTokenName, sMatched ){
	e.value = sMatched
	switch( sTokenName ){
		case 'PIPE':
			e.symbol = "'|'"
			e.title = e.value
			break;
		case 'ANY':
			e.symbol = e.value = 'ANY'
			e.title = 'ANY_CHARACTER'
			break;
		case 'CHAR_ESCAPED':
		case 'CHAR':
			e.symbol = 'c'
			e.title = e.value
			break;
		case 'QUANTIFIER1':
			var a = sMatched.split( ',' )
			if( a.length==1){
				e.n = sMatched.slice( 1,-1)
				e.symbol = '{n}'
				}
			else {
				e.n = a[0].slice( 1 )
				e.m = a[1].slice( 0,-1)
				e.symbol = e.m ? '{n,m}' : '{n,}'
				}
			e.title = 'n:'+ e.n +', m:'+ e.m
			break;
		default:
			e.symbol = sMatched
			e.title = e.value
		}
	}
Lexeme.parent =function( e, sTokenName, oValue ){
	e.value = oValue.value
	e.setTitle = setTitle
	e.setTitle()
	var sLabel = TokensLabel[ sTokenName ]
	e.symbol = sLabel===undefined ? sTokenName : ( sLabel==-1 ? e.value : sLabel )
	e.token = sTokenName
	}
</script>
<script src="js/lexer.automaton.js"></script>
<script src="js/lexer.automaton.modules.js"></script>
<script src="js/lexer.regexp.one.js"></script>
<script src="js/lexer.regexp.multi.js"></script>
<script src="js/lexer.regexp.multi.modules.js"></script>
<script>
_( 'eRegExpLexer' )
var oRELexers={
	OneRegExpLexer: OneRegExpLexer,
	MultiRegExpLexer: MultiRegExpLexer
	}
eRegExpLexer.onchange =function(){
	Stats.init( 1 )
	Stats.init( 3 )
	benchmark1.fRepeated()
	benchmark2.fRepeated()
	}
</script>

<!-- REGEXP EXAMPLES -->
<script src="js/regexp.examples.js"></script>
<script>
Events.add(
	( function( mSelected ){
		var _add =function( a ){
			var eChild = Tag( 'option' )
			eChild.innerHTML = a[0]
			eChild.value = a[1].source
			eRegExpList.appendChild( eChild )
			}
		mSelected = mSelected || null
		for( var i=0, ni=aRegExpList.length; i<ni; i++ ) _add( aRegExpList[i])
		eRegExpList.value = mSelected
		return eRegExpList
		})(),
	'change', function(){
		eRegExp.value = eRegExpList.value
		getTokens1()
		getTokens2()
		}
	)
</script>

<!-- TESTS -->
<script>
_('eRepeatTest1,eRegExp,eRegExpList')
_('eRepeatTest2,eText')
_('eRegExpResult1,eChrono1')
_('eRegExpResult2,eChrono2')
_('eRegExpResult3,eChrono3')
_('eRegExpResult4,eChrono4')
var getTokens1 =function(){
	var ni = eRepeatTest1.value
	var oLexer = oRELexers[ eRegExpLexer.value ]
	eRegExpResult1.innerHTML = ''
	eRegExpResult1.appendChild( oLexer( eRegExp.value, 'SimpleRegExp' ))
	var oChrono = new Chrono
	for(var i=0; i<ni; i++ ) oLexer( eRegExp.value, 'SimpleRegExp' )
	Stats.set( 1, oChrono.stop()/ni )
	eChrono1.innerHTML = Stats.compare( 1, 2 )
	eChrono2.innerHTML = Stats.compare( 2, 1 )
	}
var getTokens2 =function(){
	var ni = eRepeatTest1.value
	eRegExpResult2.innerHTML = ''
	eRegExpResult2.appendChild( AutomatonLexer( eRegExp.value, 'SimpleRegExp' ))
	var oChrono = new Chrono
	for(var i=0; i<ni; i++ ) AutomatonLexer( eRegExp.value, 'SimpleRegExp' )
	Stats.set( 2, oChrono.stop()/ni )
	eChrono1.innerHTML = Stats.compare( 1, 2 )
	eChrono2.innerHTML = Stats.compare( 2, 1 )
	}
var getTokens3 =function(){
	var ni = eRepeatTest2.value
	var oLexer = oRELexers[ eRegExpLexer.value ]
	eRegExpResult3.innerHTML = ''
	eRegExpResult3.appendChild( oLexer( eText.value, eSyntax.value ))
	var oChrono = new Chrono
	for(var i=0; i<ni; i++ ) oLexer( eText.value, eSyntax.value )
	Stats.set( 3, oChrono.stop()/ni )
	eChrono3.innerHTML = Stats.compare( 3, 4 )
	eChrono4.innerHTML = Stats.compare( 4, 3 )
	}
var getTokens4 =function(){
	var ni = eRepeatTest2.value
	eRegExpResult4.innerHTML = ''
	eRegExpResult4.appendChild( AutomatonLexer( eText.value, eSyntax.value ))
	var oChrono = new Chrono
	for(var i=0; i<ni; i++ ) AutomatonLexer( eText.value, eSyntax.value )
	Stats.set( 4, oChrono.stop()/ni )
	eChrono3.innerHTML = Stats.compare( 3, 4 )
	eChrono4.innerHTML = Stats.compare( 4, 3 )
	}
</script>

<!-- COMPARAISON -->
<script>
function compareResult( e1, e2 ){
	var areEquals =function( e1, e2 ){
		return e1 && e2 && e1.title == e2.title
		}
	var fCompare =function( e1, e2 ){
		if( ! areEquals( e1, e2 )){
			if( e1.value===undefined || e2.value===undefined );
			else if( e1.value.length < e2.value.length ){
				e2.className += ' difference'
				e2.title = JSON.stringify( e2.oValue, null, '\t'  ) + "\ndifferent de \n "+ JSON.stringify( e1.oValue, null, '\t'  )
				while( e1 && e2 && e1.oValue.index + e1.value.length <= e2.oValue.index + e2.value.length ){
					e1.className += ' difference'
					e1 = e1.nextSibling
					}
				return [ e1, e2.nextSibling ]
				}
			else if( e2.value.length < e1.value.length ){
				e1.className += ' difference'
				e1.title = JSON.stringify( e1.oValue, null, '\t' ) + "\ndifferent de \n "+ JSON.stringify( e2.oValue, null, '\t' )
				while( e1 && e2 && e2.oValue.index + e2.value.length <= e1.oValue.index + e1.value.length ){
					e2.className += ' difference'
					e2 = e2.nextSibling
					}
				return [ e1.nextSibling, e2 ]
				}
			else {
				e1.className += ' difference'
				e2.className += ' difference'
				}
			}
		return [ e1.nextSibling, e2.nextSibling ]
		}
	var aNodes = fCompare( e1, e2 ), aResults
	for(var _e1 = e1.firstChild, _e2 = e2.firstChild; _e1 && _e2 ;){
		aResults = compareResult( _e1, _e2 )
		_e1 = aResults[0]
		_e2 = aResults[1]
		}
	return aNodes
	}
</script>

<!-- DHTML -->
<script>
_( 'eSyntax' )
var aRules = 'CSS|HTML|INI|JS|PHP|TXT'.split('|')
Tag.addChildNodes( eSyntax, 'OPTION', aRules, 'JS' )
Events.add(
	'change',
		eSyntax, function(){
			LoadFile( 'modules/preview/'+ eSyntax.value +".htm", function( s ){
				eText.value = s
				benchmark2.fRepeated()
				})
			}
	)

benchmark1.fRepeated()
benchmark2.fRepeated()
</script>

</body>
</html>