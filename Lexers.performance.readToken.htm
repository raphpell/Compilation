<!DOCTYPE HTML>
<html>
<head>
	<title>Performance: readToken</title>
	<link rel="stylesheet" type="text/css" href="css/syntaxes.css">
	<style>
.myNode {
	border: 1px solid #CCC;
	padding:  0 2px;
	}
.myNode .myNode .myNode { background:lime; }
.myNode .myNode .myNode .myNode { background:yellow; }
.myNode .myNode .myNode .myNode .myNode { background:red; }
.undefined { background:royalblue !important;}
.w100 {
	margin: 1em;
	}
TEXTAREA {
	width: 100%;
	}
INPUT[type=button]{
	font-weight: bold;
	padding:.25em 1em;
	}
#eResult,
#eStats {
	background: none repeat scroll 0 0 #eee;
	box-sizing: border-box;
	float: left;
	font:.8em Arial;
	margin: 0;
	overflow: auto;
	padding: 1em;
	}
FIELDSET {
	float: left;
	margin: 0 1em 1em 0;
	}
FIELDSET DL{
	margin: 0;
	}
TD {
	border:1px solid #000;
	border-width: 1px 1px 0 0;
	padding: 0.25em 1em 0 1em;
	text-align: right;
	}
TH {
	cursor: pointer;
	}
	</style>
</head>
<body spellcheck="false">
<a href="index.htm">Index</a>

<h1>Performance: readToken</h1>

<fieldset><legend>Action</legend>
	<dl>
		<dt><input type="button" id="eBtnInit" value="Initialiser"></dt>
		<dt><input type="button" id="eBtnReadToken" value="Lire le token suivant"></dt>
		<dt><input type="button" id="eBtnScan" value="Scanner"></dt>
	</dl>
</fieldset>
<fieldset><legend>Etats</legend>
	<dl>
		<dt>Index: <span id="eIndex">0</span></dt>
		<dt>Ligne: <span id="eLine">1</span></dt>
		<dt>Régle: <span id="eRule">JS</span></dt>
		<dt>Précédant: <span id="ePrevious"></span></dt>
	</dl>
</fieldset>
<fieldset><legend>Lexer</legend>
	<dl>
		<dt><select id="eLexer">
			<option value="AutomatonLexer" selected>AutomatonLexer</option>
			<option value="MultiRegExpLexer">MultiRegExpLexer</option>
			<option value="OneRegExpLexer">OneRegExpLexer</option>
		</select></dt>
		<dt><input type="checkbox" id="eBSkip"><label for="eBSkip">Skip.</label></dt>
		<dt><input type="checkbox" id="eShowResult" checked><label for="eShowResult">Afficher le résultat.</label></dt>
		<dt><input type="checkbox" id="eShowStats" checked><label for="eShowStats">Afficher les stats.</label></dt>
	</dl>
</fieldset>
<fieldset><legend>Lexeme</legend>
	<dl>
		<dt><select id="eLexeme">
			<option value="HTMLElement" selected>HTMLElement</option>
			<option value="ObjectNode">ObjectNode</option>
			<option value="SimpleNode">SimpleNode</option>
		</select></dt>
	</dl>
</fieldset>
<fieldset><legend>Source</legend>
	<dl>
		<dt><label for="eSyntax">Syntaxe : </label>
			<select id="eSyntax"></select>
		</dt>
		<dt><textarea id="eText">
/* 1 - JavaScript syntax */ aaa */
	variable n = nInt1/4 + 4/nInt1++ || 10 
	var oEditor = new EditorSample ( eContent ,{
		// a single line comment ( a single quote ' )
		aArray : [ true , false , null , undefined , Infinity , NaN ],
		sDoubleQuoteString : "/* ' a multi line comment */ // a single line comment " ,
		sSingleQuoteString : '/* "\
			a multi line string */ // a single line comment '
		sBracketsTest1_1 : "{[(",
		sBracketsTest1_2 : "}])",
		/*
		a  multi line comment ( a double quote " )
		*/
		})
	RegExp.extend({
		escape :function( s ){
			// Bracket test 2
			var re1 = /(\.|\?|\*|\+|\\|\(|\)|\[|\]|\}|\{|\$|\^|\|)/g
			, re2 = /("|')/gm
			return s.replace( re1 , "\\$1" )
			}
		})

/* 2 - PHP */
	<?php
	function phpSafe ( $strText ){
		// a single line comment ( a double quote ")
		$tmpString = $strText ;
		$tmpString = str_replace( chr(92) , "" , $tmpString ); 
		returning rawurldecode( $tmpString );
		}
		
	/*
	a  multi line comment ( a single quote ' )
	*/
	$hiddencontent = phpSafe( $_POST[ 'content' ]);
	?>
	</textarea></dt>
	</dl>
</fieldset>

<div style="clear: both;">Token: <span id="eTokenInfo">...</span></div>
<hr>

<table id="eStats"></table>
<pre id="eResult"></pre>

<div style="float: left;">
	<p>La performance est moindre lorsque:</p>
	<ol>
		<li>Il créé un token composé
			<ul>
				<li>COMMENT: Commentaire simple ou multi ligne.</li>
				<li>STRING: Chaine de caractère.</li>
			</ul></li>
		<li>Une fois un token détecté le <i>lexer revient en arrière</i><br>
			et le <b>rescanne</b> pour détecter ses enfants (pour les espaces blancs...)
			<ul>
				<li>REGULAR_EXPRESSION: Expression régulière.</li>
			</ul></li>
		<li>Il créé 2 tokens: Un parent et son premier enfant
			<ul><!-- 
				<li><abbr title="Multi Line Comment">MLC</abbr>: Commentaire multi ligne.</li>
				<li><abbr title="Multi Line Comment">SLC</abbr>: Commentaire simple ligne.</li>
				<li><abbr title="String Double Quote">SDQ</abbr> ou DOUBLE_QUOTE: Chaine de caractère.</li>
				<li><abbr title="String Single Quote">SSQ</abbr> ou SINGLE_QUOTE:. Chaine de caractère.</li> -->
				<li>PHP: Code PHP....</li>
			</ul></li>
	</ol>
	<p>A noter que les lexers retournent <code>true</code> quand:</p>
	<ul>
		<li>il dépile un parent après n'avoir trouvé aucun token.</li>
		<li>un token est passé (skipped).</li>
	</ul>
</div>

<!-- FRAMEWORK... -->
<script src="js/framework.js"></script>
<script src="js/shared.js"></script>
<script src="widget/Stats/scripts.js"></script>
<script>
Stats.getTime =function( n ){
	return (n*1000).toFixed(1)
	}
</script>
	
<!-- LEXER NODE -->
<script src="js/lexer.node.object.js"></script>
<script src="js/lexer.node.simple.js"></script>
<script>
var replaceSpecialHTML =function( s ){
	return s.str_replace( ['&','<','>'], ['&amp;','&lt;','&gt;'])
	}
var valueToString =function(o){
	return JSON.stringify( o, 'token,parentToken,css,index,lineStart,lineEnd'.split(','), " " ).str_replace('"', '')
	}
var setTitle =function(){
	if( ! this.oValue ) console.warn(this)
	this.title = valueToString( this.oValue )
	}
var Lexemes ={
	HTMLElement :function( o ){
		var e = document.createElement( o.token )
		e.oValue = o
		if( eShowResult.checked ){
			e.className = 'myNode '+ o.css
			e.setTitle = setTitle
			e.setTitle()
			if( o.value ) e.innerHTML = replaceSpecialHTML( o.value )
			}
		return e
		},
	ObjectNode :function( o ){
		var oNode = new Node ( o.token )
		oNode.oValue = o
		return oNode
		},
	SimpleNode :function( o ){
		var oNode = new SimpleNode ( o.token )
		oNode.oValue = o
		return oNode
		}
	}
</script>

<!-- LEXERS -->
<script src="js/lexer.class.js"></script>
<script src="js/lexer.regexp.one.js"></script>
<script src="js/lexer.regexp.one.modules.js"></script>
<script src="js/lexer.regexp.multi.js"></script>
<script src="js/lexer.regexp.multi.modules.js"></script>
<script src="js/lexer.automaton.js"></script>
<script src="js/lexer.automaton.modules.js"></script>
<script> // MultiRegExpLexer, AutomatonLexer
var oLexer
</script>

<script src="widget/tSorter.js" type="text/javascript"></script>
<!-- TESTS -->
<script>
var oChrono = new Chrono ()
, eToken, oLexer, Lexeme
, TableSorter // TableSorter.sort(1,'DESC')
View ={
	bScanning: false,
	reset :function(){
		var b = eLexeme.value=='ObjectNode'
		if( eShowResult.disabled = b ) eShowResult.checked = false
		Lexeme = window.Lexemes[ eLexeme.value ]
		oLexer = new window[ eLexer.value ]
		Stats.reset()
		View.init()
		eStats.innerHTML = ''
		},
	init :function(){
		oLexer.init( eText.value, eSyntax.value )
		oLexer.skip.set( eBSkip.checked )
		eResult.innerHTML= ''
		if( eShowResult.checked && eLexeme.value=='HTMLElement' ) eResult.appendChild( oLexer.eRoot )
		if( ! eShowStats.checked ) eStats.innerHTML = ''
		View.setInfo()
		},
	readToken :function(){
		oChrono.start()
		if( eToken = oLexer.readToken()){
			var o = eToken.oValue
			if( eShowStats.checked )
				Stats.set( o ? o.token : "--true--", oChrono.stop())
			}
		if( ! View.bScanning ){
			View.setInfo( eToken )
			View.setStats()
			}
		return eToken
		},
	scan :function(){
		View.bScanning = true
		if( ! View.readToken()) View.init()
		while( eToken = View.readToken()){}
		View.setInfo()
		View.setStats()
		View.bScanning = false
		},
	setInfo :function( eToken ){
		eTokenInfo.innerHTML = eToken ? JSON.stringify( eToken.oValue || true ) : '...'
		eIndex.innerHTML = oLexer.nPos
		eLine.innerHTML = oLexer.nLine
		eRule.innerHTML = oLexer.sSyntax
		ePrevious.innerHTML = oLexer.previous.get()
		},
	setStats :function(){
		if( eShowStats.checked ){
			var aStats = []
			for(var s in Stats ){
				var o = Stats[s]
				if( o && o.max && s!='print' ){
					o.toString =function(){
						return '<td>'+ this.key+'</td>'+
							'<td>'+ this.tot + '</td>'+
							'<td>'+ Stats.getTime( this.min ) + '</td>'+
							'<td>'+ Stats.getTime( this.moy ) + '</td>'+
							'<td>'+ Stats.getTime( this.max ) + '</td>'+
							'<td>'+ (this.sum.toFixed(3)) + '</td>'
						}
					aStats.push( o )
					}
				}
			aStats.sortBy( 'count', 'DESC' )
			eStats.innerHTML =
				'<thead><tr>'
					+'<th>'+'token</th>'
					+'<th abbr="number">nbre</th>'
					+'<th abbr="number">min (µs)</th>'
					+'<th abbr="number">moy (µs)</th>'
					+'<th abbr="number">max (µs)</th>'
					+'<th abbr="number">total (ms)</th>'
				+'</tr></thead>'
				+'<tbody><tr>'+ aStats.join('</tr><tr>') +'</tr></tbody>'
				
			TableSorter = new TSorter;
			TableSorter.init('eStats');
			}
		}
	}
</script>


<!-- DHTML -->
<script>

_( 'eLexer' )
_( 'eText,eResult,eBSkip,eShowResult,eStats,eShowStats' )
_( 'eBtnReadToken,eBtnInit' )
_( 'eTokenInfo,eIndex,eLine,eRule' )
_( 'eSyntax' )
var aRules = 'CSS|HTML|INI|JS|PHP|TXT'.split('|')
Tag.addChildNodes( eSyntax, 'OPTION', aRules, 'JS' )

Events.add(
	'click',
		eBtnInit, View.init,
		eBtnReadToken, View.readToken,
		eBtnScan, View.scan,
	'change',
		eBSkip, View.reset,
		eLexer ,View.reset,
		eLexeme ,View.reset,
		eSyntax, function(){
			LoadFile( 'modules/preview/'+ eSyntax.value +".htm", function( s ){
				eText.value = s
				View.reset()
				})
			}
	)
eLexeme.onchange()
eLexer.onchange()
</script>

</body>
</html>