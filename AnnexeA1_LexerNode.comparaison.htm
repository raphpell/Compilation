<html>
	<head>
		<title>Comparaison des LexerNodes</title>
		<link rel="stylesheet" type="text/css" href="widget/Stats/styles.css">
		<style>
CODE, PRE {
	background: #EEE;
	border: 2px solid #666;
	border-width: 1px 0 2px 0;
	color: #000;
	display: block;
	font-weight: bold;
	margin: 1em 0 .25em;
	padding: .5em 1em;
	}
H2 {
	background: #EEE;
	border-bottom: 4px solid #666;
	margin: 0;
	padding: .25em;
	}
DIV {
	margin: 0 0 1em;
	}
		</style>
	</head>
<body>

<a href="index.htm">Index</a>
<h1>Comparaison des LexerNodes</h1>

<p>
	Les differents objets sont censés répondre aux mêmes tests unitaires.
	Le temps d'execution est la seule chose observée ici.
</p>

<input type="button" id="eTest" onclick="UnitTest()" value="test">
<input type="input" id="eRepeat" value="100" size="3"> fois


<table border="1" id="eTABLE"></table>


<script src="js/framework.js"></script>
<script src="js/shared.js"></script>
<script src="js/lexer.node.object.js"></script>

<!-- LexerNode -->
<script>
var LexerNode
, createLexerNode =function( sNodeType ){
	var s
	switch( sNodeType ){
		case 'HTMLElement': s='document.createElement(o.token)'; break;
		case 'ObjectNode': s='new Node(o.token)'; break;
		case 'EmptyObject': s='EmptyObject(o.token)'; break;
		default: throw Error ('Invalid LexerNode Type.')
		}
	LexerNode = new Function ( 'o', 
		'var e = '+ s +';'
		+'e.oValue=o;'
		+'return e;'
		)
	}
	
EmptyObject=(function(){ // Pas une solution !
	var _proto ={
		appendChild :function(){},
		insertBefore :function(){},
		removeChild :function(){}
		}
	return function( sTokenName ){
		return {
			nodeName: sTokenName,
			appendChild: _proto.appendChild,
			removeChild: _proto.removeChild
			}
		}
	})()

</script>

<!-- Stats -->
<script src="widget/Stats/scripts.js"></script>
<script>
Stats.getTime =function( n ){
	return (n*1000).toFixed(2) +' µs'
	}
Stats.getName =function( sNodeType, nId ){
	return sNodeType + nId
	}
</script>

<script>
_('eTest,eRepeat,eTABLE')
var oChrono = new Chrono (), oResult
var aLexerNodeType = ['HTMLElement','ObjectNode','EmptyObject']

var CompareTests =function( nId ){
	var a = Array.merge( aLexerNodeType, [])
	for(var i=0; a[i]; i++) a[i] = Stats.getName(a[i], nId )
	for(var i=0, ni=a.length; i<ni; i++){
		if( _( a[0] )) _( a[0]).lastChild.innerHTML = Stats.compare.apply( Stats, a )
		a.push( a.shift())
		}
	}

var aTests =(function(){
	var o1, o2
	return [
		{name:'o1 = new LexerNode',test:function(){
			o1 = new LexerNode ({token:'STRING'})
			}},
		{name:'o2 = new LexerNode',test:function(){
			o2 = new LexerNode ({token:'STRING'})
			}},
		{name:'o1.appendChild( o2 )',test:function(){
			o1.appendChild( o2 )
			}},
		{name:'o1.removeChild( o2 )',test:function(){
			o1.removeChild( o2 )
			}},
		{name:'',test:function(){
			o1 = o2 = null
			}}
		]
	})()

UnitTest=function(){
	var nLimit = eRepeat.value
	for(var j=0; aLexerNodeType[j]; j++){
		var sNodeType = aLexerNodeType[j]
		createLexerNode( sNodeType )
		for(var i=0; i<nLimit; i++)
			for(var k=0; aTests[k]; k++)
				UnitTest.test( Stats.getName( sNodeType, k ), k )
		}
	UnitTest.show()
	}
UnitTest.init =function( sNodeType, nId ){
	var eTR = Tag('TR'), eTH
	for(var j=0; aLexerNodeType[j]; j++){
		var sNodeType = aLexerNodeType[j]
		eTH = eTR.appendChild( Tag('TH', {
			id:'e'+sNodeType,
			innerHTML:'<h2>'+sNodeType+'</h2>'
			}))
		for(var k=0; aTests[k]; k++)
			if( aTests[k].name )
				eTH.appendChild( Tag('DIV', {
					id: Stats.getName( aLexerNodeType[j], k ),
					innerHTML: '<code>'+ aTests[k].name +'</code><div></div>'
					}))
		}
	eTABLE.appendChild( eTR )
	}
UnitTest.test =function( sName, nId ){
	oChrono.start()
	aTests[nId].test()
	Stats.set( sName, oChrono.stop())
	}
UnitTest.show =function(){
	for(var i=0; aTests[i]; i++) CompareTests( i )
	}
	
UnitTest.init()
UnitTest()

var nTime=0
var nInterval = setInterval(
	function(){
		if( ++nTime == 20 ) clearInterval( nInterval )
		else UnitTest()
	}, 200 )
eTest.focus()
</script>

</body>
</html>