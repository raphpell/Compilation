<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet type="text/xsl" href="UnitTest.xsl"?> 

<truth name="Actions">
	<script src="../../../js/framework.js"></script>
	<script src="../../../js/lexer.class.js"></script>
	<script src="../../../js/lexer.automaton.js"></script>
	<script src="../../../js/lexer.automaton.modules.js"></script>
	<script>
		document.getElementById('eTopLeftMenu').innerHTML +=
		' - &lt;a href="../doc/LexerClass.Actions.xml"&gt;Documentation associés&lt;/a&gt;'
	</script>
	<desc>
		Le Lexer à automates sert à réaliser des tests plus complexes.
	</desc>
	<test name="Préambule" class="preambule">
		<assertions name="Lexer vide">
			<value><![CDATA[
var Lexer = AutomatonLexer
var oLexer = new Lexer
oLexer.init( '' )
			]]></value>
		</assertions>
		<assertions name="Assertions">
			<value><![CDATA[
var _PreviousEqual =function( s ){
    return s
        ? oLexer.previous.get() === s
        : oLexer.previous.get()
    }
var _LastElementEqual =function( e ){
    return oLexer.stack.top().lastChild === e
    }
var _LineEqual =function( n ){
    return oLexer.nLine === n
    }
var _CurrentRuleEqual =function( sRule ){
    return sRule
        ? oLexer.stack.top().oValue.rule === sRule
        : oLexer.stack.top().oValue.rule
    }
var _TOSEqual =function( e ){
    return oLexer.stack.top() === e
    }
			]]></value>
		</assertions>
		<assertions name="Lexème du système">
			<value><![CDATA[
var TRANSLATION = {
	COUCOU: 'SALUTATION',
	L_NEW_LINE: 'NEW_LINE',
	}			
var makeLexeme =function( s, tokenname, i, l ){
	i = i || 45
	l = l || 5
    var sRule = 'TXT'
    oLexer.sSyntax = sRule
    oLexer.sValue = s
    oLexer.sToken = tokenname
    oLexer.nPos = i + s.length
    oLexer.nLine = l
    return {
        value: s,
        token: TRANSLATION[tokenname] || tokenname,
        css: '',
        rule: sRule,
        index: i,
        lineStart: l,
        lineEnd: l
        }
    }
			]]></value>
		</assertions>
	</test>
	
	<test name="L'objet Action">
		<assertions name="Objet Action">
			<value><![CDATA[
var Actions = Lexer.Actions
var Do =function( sAction, oLexeme ){
    return Actions[ sAction ].call( oLexer, oLexeme )
    }
			]]></value>
			<assert><![CDATA[ Actions ]]></assert>
			<assert><![CDATA[ Actions.constructor === Function ]]></assert>
			<assert><![CDATA[ Actions.add ]]></assert>
			<assert><![CDATA[ Actions.endParent ]]></assert>
			<assert><![CDATA[ Actions.newLine ]]></assert>
			<assert><![CDATA[ Actions.rescanToken ]]></assert>
			<assert><![CDATA[ Actions.startParent ]]></assert>
		</assertions>
		<assertions name="Directives">
			<value><![CDATA[ var o = Actions.directive ]]></value>
			<assert><![CDATA[ o ]]></assert>
			<assert><![CDATA[ o.E === 'endParent' ]]></assert>
			<assert><![CDATA[ o.L === 'newLine' ]]></assert>
			<assert><![CDATA[ o.R === 'rescanToken' ]]></assert>
			<assert><![CDATA[ o.S === 'startParent' ]]></assert>
		</assertions>
	</test>
	
	<test name="Méthodes de l'objet" class="preambule"></test>
	<test name="add">
		<assertions name="Token simple">
			<value><![CDATA[
var oLexeme = makeLexeme( 'coucou', 'COUCOU' )
			]]></value>
			<assert><![CDATA[ e = Do( 'add', oLexeme ) ]]></assert>
			<assert><![CDATA[ _LastElementEqual( e ) ]]></assert>
			<assert><![CDATA[ _PreviousEqual( 'SALUTATION' ) ]]></assert>
		</assertions>
		<assertions name="Token non significatif">
			<value><![CDATA[
var oLexeme = makeLexeme( '\t', 'TAB' )
			]]></value>
			<assert><![CDATA[ e = Do( 'add', oLexeme ) ]]></assert>
			<assert><![CDATA[ _LastElementEqual( e ) ]]></assert>
			<assert><![CDATA[ _PreviousEqual( 'SALUTATION' ) ]]></assert>
		</assertions>
		<assertions name="Token non significatif passé">
			<value><![CDATA[
oLexer.skip.set( true )
var oLexeme = makeLexeme( '\t', 'TAB' )
var e = Do( 'add', oLexeme )
oLexer.skip.set( false )
			]]></value>
			<assert><![CDATA[ e === true ]]></assert>
			<assert><![CDATA[ ! _LastElementEqual( e ) ]]></assert>
			<assert><![CDATA[ _PreviousEqual( 'SALUTATION' ) ]]></assert>
		</assertions>
	</test>
	<test name="newLine">
		<assertions>
			<value><![CDATA[
var oLexeme = makeLexeme( '\r\n', 'L_NEW_LINE', 1, 2 )
			]]></value>
			<assert><![CDATA[ _LineEqual( 2 ) ]]></assert>
			<assert><![CDATA[ e = Do( 'newLine', oLexeme ) ]]></assert>
			<assert><![CDATA[ _LastElementEqual( e ) ]]></assert>
			<assert><![CDATA[ _PreviousEqual( 'NEW_LINE' ) ]]></assert>
			<assert><![CDATA[ _LineEqual( 3 ) ]]></assert>
		</assertions>
		<assertions name="Comportement par défaut">
			<value><![CDATA[
var oLexeme = makeLexeme( 'arrh', 'BIDON', 1, 2 )
			]]></value>
			<assert><![CDATA[ _LineEqual( 2 ) ]]></assert>
			<assert><![CDATA[ e = Do( 'newLine', oLexeme ) ]]></assert>
			<assert><![CDATA[ _LastElementEqual( e ) ]]></assert>
			<assert><![CDATA[ _PreviousEqual( 'BIDON' ) ]]></assert>
			<assert><![CDATA[ _LineEqual( 3 ) ]]></assert>
		</assertions>
	</test>
	<test name="Parent à 2 délimiteurs">
		<assertions name="...">
			<value><![CDATA[
var _ =function( sRule, eElement, sPrevious, eParent ){
    return _CurrentRuleEqual( sRule )
        && _LastElementEqual( eElement )
        && _PreviousEqual( sPrevious )
        && _TOSEqual( eParent )
    }
var add =function( sValue, sToken, nIndex, nLine ){
    return Do(
        'add',
        makeLexeme( sValue, sToken, nIndex, nLine )
        )
    }
, _IsParentLimit =function( e, sToken, oValue ){
    return ( e.nodeName === sToken )
        && ( oValue ? e.oValue === oValue : true )
        && ( e.oValue.bParentLimit === true )
        && e
    }
, _IsParent =function( e, sToken, nChildNodes ){
    return e.nodeName === sToken
        && e.childNodes.length === nChildNodes
        && e.oValue.bParent === true
        && e
    }
			]]></value>
		</assertions>
		<assertions name="Étape/étape">
			<value><![CDATA[
var eTokenBefore = add( '=', 'TOKEN_BEFORE', 9, 2 )
, oFirstChild = makeLexeme( '{', 'S_BLOCK', 10, 2 )
, oLastChild = makeLexeme( '}', 'E_BLOCK', 11, 2 )
			]]></value>
			<assert><![CDATA[ Lexer.Skip.stepOf.BLOCK === undefined ]]></assert>
			<assert><![CDATA[ _( 'TXT', eTokenBefore, 'TOKEN_BEFORE', oLexer.eRoot ) ]]></assert>
			<assert><![CDATA[ oFirstChild.bParentLimit === undefined ]]></assert>
			<assert><![CDATA[ oLastChild.bParentLimit === undefined ]]></assert>
			<assert><![CDATA[ eParent = Do( 'startParent', oFirstChild ) ]]></assert>
			<assert><![CDATA[ _IsParent( eParent, 'BLOCK', 1 ) ]]></assert>
			<assert><![CDATA[ _IsParentLimit( eParent.firstChild, 'S_BLOCK', oFirstChild ) ]]></assert>
			<assert><![CDATA[ _( 'BLOCK', eParent.firstChild, 'S_BLOCK', eParent ) ]]></assert>
			<assert><![CDATA[ eLastChild = Do( 'endParent', oLastChild ) ]]></assert>
			<assert><![CDATA[ _IsParent( eParent, 'BLOCK', 2 ) ]]></assert>
			<assert><![CDATA[ eParent.lastChild === eLastChild  ]]></assert>
			<assert><![CDATA[ _IsParentLimit( eParent.lastChild, 'E_BLOCK', oLastChild ) ]]></assert>
			<assert><![CDATA[ _( 'TXT', eParent, 'BLOCK', oLexer.eRoot ) ]]></assert>
		</assertions>
		<assertions name="En 1 coup">
			<value><![CDATA[
oLexer.sText = 'var s="string";';

var eTokenBefore = add( '=', 'AFFECTATION', 5, 1 )
, oFirstChild = makeLexeme( '"', 'S_SDQ', 6, 1 )
			]]></value>
			<assert><![CDATA[ Lexer.Skip.stepOf.SDQ ]]></assert>
			<assert><![CDATA[ Lexer.Rules.Translation.SDQ === 'STRING'  ]]></assert>
			<assert><![CDATA[ Lexer.Rules.Translation.S_SDQ === 'DOUBLE_QUOTE'  ]]></assert>
			<assert><![CDATA[ Lexer.Rules.Translation.E_SDQ === 'DOUBLE_QUOTE'  ]]></assert>
			<assert><![CDATA[ _( 'TXT', eTokenBefore, 'AFFECTATION', oLexer.eRoot ) ]]></assert>
			<assert><![CDATA[ eParent = Do( 'startParent', oFirstChild ) ]]></assert>
			<assert><![CDATA[ _IsParent( eParent, 'STRING', 3 ) ]]></assert>
			<assert><![CDATA[ _IsParentLimit( eParent.firstChild, 'S_SDQ', oFirstChild ) ]]></assert>
			<assert><![CDATA[ _IsParentLimit( eParent.lastChild, 'DOUBLE_QUOTE' ) ]]></assert>
			<assert><![CDATA[ _( 'TXT', eParent, 'STRING', oLexer.eRoot ) ]]></assert>
		</assertions>
		<assertions name="En 1 coup (Token non significatif)">
			<value><![CDATA[
oLexer.sText = 'oops/* test */';

var eTokenBefore = add( 'oops', 'TOKEN_BEFORE', 0, 1 )
, oFirstChild = makeLexeme( '/*', 'S_MLC', 4, 1 )
			]]></value>
			<assert><![CDATA[ Lexer.Skip.stepOf.MLC ]]></assert>
			<assert><![CDATA[ Lexer.Rules.Translation.MLC === 'COMMENT'  ]]></assert>
			<assert><![CDATA[ _( 'TXT', eTokenBefore, 'TOKEN_BEFORE', oLexer.eRoot ) ]]></assert>
			<assert><![CDATA[ eParent = Do( 'startParent', oFirstChild ) ]]></assert>
			<assert><![CDATA[ _IsParent( eParent, 'COMMENT', 5 )  ]]></assert>
			<assert><![CDATA[ _IsParentLimit( eParent.firstChild, 'S_MLC', oFirstChild ) ]]></assert>
			<assert><![CDATA[ _IsParentLimit( eParent.lastChild, 'E_MLC' ) ]]></assert>
			<assert><![CDATA[ _( 'TXT', eParent, 'TOKEN_BEFORE', oLexer.eRoot ) ]]></assert>
		</assertions>
		<assertions name="Passé, en 1 coup (Token non significatif)">
			<value><![CDATA[
oLexer.sText = 'oops/* test */';
oLexer.skip.set( true )

var eTokenBefore = add( 'oops', 'TOKEN_BEFORE', 0, 1 )
, oFirstChild = makeLexeme( '/*', 'S_MLC', 4, 1 )
			]]></value>
			<assert><![CDATA[ _( 'TXT', eTokenBefore, 'TOKEN_BEFORE', oLexer.eRoot ) ]]></assert>
			<assert><![CDATA[ ! oFirstChild.bParentLimit ]]></assert>
			<assert><![CDATA[ Do( 'startParent', oFirstChild ) === true ]]></assert>
			<assert><![CDATA[ oFirstChild.bParentLimit ]]></assert>
			<assert><![CDATA[ _( 'TXT', eTokenBefore, 'TOKEN_BEFORE', oLexer.eRoot ) ]]></assert>
		</assertions>
	</test>
	<test name="rescanToken">
		<assertions>
			<value><![CDATA[
oLexer.sText = 'var re=/[abcd]/'
oLexer.skip.set( false )

var eTokenBefore = add( '=', 'AFFECTATION',6, 1 )
, oRescaned = makeLexeme( '/[abcd]/', 'R_REGULAR_EXPRESSION', 7, 1 )
			]]></value>
			<assert><![CDATA[ oRescaned ]]></assert>
			<assert><![CDATA[ oRescaned.value ===  '/[abcd]/' ]]></assert>
			<assert><![CDATA[ oRescaned.bParent === undefined ]]></assert>
			<assert><![CDATA[ oRescaned.bRescan === undefined ]]></assert>
			<assert><![CDATA[ _( 'TXT', eTokenBefore, 'AFFECTATION', oLexer.eRoot ) ]]></assert>
			<assert><![CDATA[ eParent = Do( 'rescanToken', oRescaned ) ]]></assert>
			<assert><![CDATA[ eParent.oValue === oRescaned ]]></assert>
			<assert><![CDATA[ oRescaned ]]></assert>
			<assert><![CDATA[ oRescaned.value ===  '' ]]></assert>
			<assert><![CDATA[ oRescaned.bParent === true ]]></assert>
			<assert><![CDATA[ oRescaned.bRescan === true ]]></assert>
			<assert><![CDATA[ _( 'TXT', eParent, 'REGULAR_EXPRESSION', oLexer.eRoot ) ]]></assert>
		</assertions>
	</test>
</truth>