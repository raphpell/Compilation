<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet type="text/xsl" href="UnitTest.xsl"?> 

<truth name="Actions">
	<script src="../../../js/framework.js"></script>
	<script src="../../../js/lexer.class.js"></script>
	<desc>
		<script>
			document.getElementById('eTopLeftMenu').innerHTML +=
			' - &lt;a href="../doc/LexerClass.Actions.xml"&gt;Documentation associés&lt;/a&gt;'
		</script>
	</desc>
	<test name="Préambule" class="preambule">
		<assertions name="Lexer vide">
			<value><![CDATA[
var Lexer = LexerClass()
var oLexer = new Lexer
oLexer.init( '' )
			]]></value>
		</assertions>
		<assertions name="Assertions">
			<value><![CDATA[
var _PreviousEqual =function( s ){
    return s
        ? oLexer.previous.get() === s
        : oLexer.previous.get()
    }
var _LastElementEqual =function( e ){
    return oLexer.stack.top().lastChild === e
    }
var _LineEqual =function( n ){
    return oLexer.nLine === n
    }
var _CurrentRuleEqual =function( sRule ){
    return sRule
        ? oLexer.stack.top().oValue.rule === sRule
        : oLexer.stack.top().oValue.rule
    }
var _TOSEqual =function( e ){
    return oLexer.stack.top() === e
    }
			]]></value>
		</assertions>
		<assertions name="Lexème du système">
			<value><![CDATA[
var TRANSLATION = {
	COUCOU: 'SALUTATION',
	L_NEW_LINE: 'NEW_LINE',
	}			
var makeLexeme =function( s, tokenname, i, l ){
	i = i || 45
	l = l || 5
    var sRule = 'TXT'
    oLexer.sSyntax = sRule
    oLexer.sValue = s
    oLexer.sToken = tokenname
    oLexer.nPos = i + s.length
    oLexer.nLine = l
    return {
        value: s,
        token: TRANSLATION[tokenname] || tokenname,
        css: '',
        rule: sRule,
        index: i,
        lineStart: l,
        lineEnd: l
        }
    }
			]]></value>
		</assertions>
	</test>
	
	<test name="L'objet Action">
		<assertions name="Objet Action">
			<value><![CDATA[
var Actions = Lexer.Actions
var Do =function( sAction, oLexeme ){
    return Actions[ sAction ].call( oLexer, oLexeme )
    }
			]]></value>
			<assert><![CDATA[ Actions ]]></assert>
			<assert><![CDATA[ Actions.constructor === Function ]]></assert>
			<assert><![CDATA[ Actions.add ]]></assert>
			<assert><![CDATA[ Actions.endParent ]]></assert>
			<assert><![CDATA[ Actions.newLine ]]></assert>
			<assert><![CDATA[ Actions.rescanToken ]]></assert>
			<assert><![CDATA[ Actions.startParent ]]></assert>
		</assertions>
		<assertions name="Directives">
			<value><![CDATA[ var o = Actions.directive ]]></value>
			<assert><![CDATA[ o ]]></assert>
			<assert><![CDATA[ o.E === 'endParent' ]]></assert>
			<assert><![CDATA[ o.L === 'newLine' ]]></assert>
			<assert><![CDATA[ o.R === 'rescanToken' ]]></assert>
			<assert><![CDATA[ o.S === 'startParent' ]]></assert>
		</assertions>
	</test>
	
	<test name="Méthodes de l'objet" class="preambule"></test>
	<test name="add">
		<assertions name="Token simple">
			<value><![CDATA[
var oLexeme = makeLexeme( 'coucou', 'COUCOU' )
			]]></value>
			<assert><![CDATA[ e = Do( 'add', oLexeme ) ]]></assert>
			<assert><![CDATA[ _LastElementEqual( e ) ]]></assert>
			<assert><![CDATA[ _PreviousEqual( 'SALUTATION' ) ]]></assert>
		</assertions>
		<assertions name="Token non significatif">
			<value><![CDATA[
var oLexeme = makeLexeme( '\t', 'TAB' )
			]]></value>
			<assert><![CDATA[ e = Do( 'add', oLexeme ) ]]></assert>
			<assert><![CDATA[ _LastElementEqual( e ) ]]></assert>
			<assert><![CDATA[ _PreviousEqual( 'SALUTATION' ) ]]></assert>
		</assertions>
		<assertions name="Token non significatif passé">
			<value><![CDATA[
oLexer.skip.set( true )
var oLexeme = makeLexeme( '\t', 'TAB' )
var e = Do( 'add', oLexeme )
oLexer.skip.set( false )
			]]></value>
			<assert><![CDATA[ e === true ]]></assert>
			<assert><![CDATA[ ! _LastElementEqual( e ) ]]></assert>
			<assert><![CDATA[ _PreviousEqual( 'SALUTATION' ) ]]></assert>
		</assertions>
	</test>
	<test name="newLine">
		<assertions>
			<value><![CDATA[
var oLexeme = makeLexeme( '\r\n', 'L_NEW_LINE', 1, 2 )
			]]></value>
			<assert><![CDATA[ _LineEqual( 2 ) ]]></assert>
			<assert><![CDATA[ e = Do( 'newLine', oLexeme ) ]]></assert>
			<assert><![CDATA[ _LastElementEqual( e ) ]]></assert>
			<assert><![CDATA[ _PreviousEqual( 'NEW_LINE' ) ]]></assert>
			<assert><![CDATA[ _LineEqual( 3 ) ]]></assert>
		</assertions>
		<assertions name="Comportement par défaut">
			<value><![CDATA[
var oLexeme = makeLexeme( 'arrh', 'BIDON', 1, 2 )
			]]></value>
			<assert><![CDATA[ _LineEqual( 2 ) ]]></assert>
			<assert><![CDATA[ e = Do( 'newLine', oLexeme ) ]]></assert>
			<assert><![CDATA[ _LastElementEqual( e ) ]]></assert>
			<assert><![CDATA[ _PreviousEqual( 'BIDON' ) ]]></assert>
			<assert><![CDATA[ _LineEqual( 3 ) ]]></assert>
		</assertions>
	</test>
	<test name="Parent">
		<assertions name="Token significatif">
			<value><![CDATA[
var eTokenBefore = Do(
    'add',
    makeLexeme( '=', 'TOKEN_BEFORE', 9, 2 )
    )

var _ =function( sRule, eElement, sPrevious, eParent ){
    return _CurrentRuleEqual( sRule )
        && _LastElementEqual( eElement )
        && _PreviousEqual( sPrevious )
        && _TOSEqual( eParent )
    }
			]]></value>
			<assert><![CDATA[ _( 'TXT', eTokenBefore, 'TOKEN_BEFORE', oLexer.eRoot ) ]]></assert>
			<assert><![CDATA[ eParent = Do( 'startParent', makeLexeme( '"', 'S_STRING', 10, 2 )) ]]></assert>
			<assert><![CDATA[ eParent.firstChild.nodeName === 'S_STRING'  ]]></assert>
			<assert><![CDATA[ _( 'STRING', eParent.firstChild, 'S_STRING', eParent ) ]]></assert>
			<assert><![CDATA[ eLastChild = Do( 'endParent', makeLexeme( '"', 'E_STRING', 11, 2 )) ]]></assert>
			<assert><![CDATA[ eParent.lastChild.nodeName === 'E_STRING'  ]]></assert>
			<assert><![CDATA[ _( 'TXT', eParent, 'STRING', oLexer.eRoot ) ]]></assert>
		</assertions>
		<assertions name="Token non significatif">
			<value><![CDATA[
var eTokenBefore = Do(
    'add',
    makeLexeme( '=', 'TOKEN_BEFORE', 9, 2 )
    )

var _ =function( sRule, eElement, sPrevious, eParent ){
    return _CurrentRuleEqual( sRule )
        && _LastElementEqual( eElement )
        && _PreviousEqual( sPrevious )
        && _TOSEqual( eParent )
    }
			]]></value>
			<assert><![CDATA[ _( 'TXT', eTokenBefore, 'TOKEN_BEFORE', oLexer.eRoot ) ]]></assert>
			<assert><![CDATA[ eParent = Do( 'startParent', makeLexeme( '"', 'S_MLC', 10, 2 )) ]]></assert>
			<assert><![CDATA[ eParent.firstChild.nodeName === 'S_MLC'  ]]></assert>
			<assert><![CDATA[ _( 'MLC', eParent.firstChild, 'S_MLC', eParent ) ]]></assert>
			<assert><![CDATA[ eLastChild = Do( 'endParent', makeLexeme( '"', 'E_MLC', 11, 2 )) ]]></assert>
			<assert><![CDATA[ eParent.lastChild.nodeName === 'E_MLC'  ]]></assert>
			<assert><![CDATA[ _( 'TXT', eParent, 'STRING', oLexer.eRoot ) ]]></assert>
		</assertions>
	</test>
	<test name="rescanToken">
		<assertions>
			<desc>___</desc>
			<value><![CDATA[

			]]></value>
			<assert><![CDATA[ true ]]></assert>
		</assertions>
	</test>
</truth>