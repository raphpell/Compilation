<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet type="text/xsl" href="UnitTest.xsl"?> 

<truth name="DFA">
	<script src="../../../js/framework.js"></script>
	<script src="../../../js/automaton.js"></script>
	<desc>...</desc>
	<test class="preambule">
		<assertions>
			<value><![CDATA[
var f = function( sChar ){
	var oFA = Automate.makeChar( sChar )
	oFA.aTokensID = [[ 'letter_'+ sChar, oFA.F ]]
	return oFA
	}
var oNFA, oDFA
			]]></value>
		</assertions>
	</test>
	<test name="constructor">
		<assertions>
			<value><![CDATA[
oNFA = f('a')
			]]></value>
			<assert><![CDATA[ oNFA ]]></assert>
			<assert><![CDATA[ ! oNFA.type ]]></assert>
			<assert><![CDATA[ ! oNFA.M ]]></assert>
		</assertions>
		<assertions>
			<value><![CDATA[
oDFA = new DFA( oNFA )
			]]></value>
			<assert><![CDATA[ oDFA ]]></assert>
			<assert><![CDATA[ oDFA.type==="DFA" ]]></assert>
			<assert><![CDATA[ oDFA.M ]]></assert>
		</assertions>
	</test>
	<test name="DFA.prototype.test">
		<assertions>
			<value><![CDATA[
var oDFA1 = new DFA ( f('a') )
var oDFA2 = new DFA ( Automate.optional( f('a')) )
var oDFA3 = new DFA ( Automate.repeat0n( f('a')) )
			]]></value>
		</assertions>
		<assertions>
			<assert><![CDATA[ oDFA1.test('|') === null  ]]></assert>
			<assert><![CDATA[ oDFA1.test('a|') === 'a'  ]]></assert>
			<assert><![CDATA[ oDFA1.test('aa|') === 'a'  ]]></assert>
		</assertions>
		<assertions>
			<assert><![CDATA[ oDFA2.test('|') === ''  ]]></assert>
			<assert><![CDATA[ oDFA2.test('a|') === 'a'  ]]></assert>
			<assert><![CDATA[ oDFA2.test('aa|') === 'a'  ]]></assert>
		</assertions>
		<assertions>
			<assert><![CDATA[ oDFA3.test('|') === ''  ]]></assert>
			<assert><![CDATA[ oDFA3.test('a|') === 'a'  ]]></assert>
			<assert><![CDATA[ oDFA3.test('aa|') === 'aa'  ]]></assert>
		</assertions>
	</test>
	<test name="DFA.prototype.toJS">
		<assertions>
			<value><![CDATA[

			]]></value>
			<assert><![CDATA[ true ]]></assert>
		</assertions>
	</test>
	<test name="DFA.prototype.toRE">
		<assertions>
			<value><![CDATA[

			]]></value>
			<assert><![CDATA[ true ]]></assert>
		</assertions>
	</test>
	<test name="DFA.aggregate">
		<assertions>
			<value><![CDATA[
oDFA = DFA.aggregate( f('a'), f('b') )
			]]></value>
			<assert><![CDATA[ ! oDFA.sError ]]></assert>
			<assert><![CDATA[ oDFA ]]></assert>
			<assert><![CDATA[ oDFA.I === 1 ]]></assert>
			<assert><![CDATA[ oDFA.F.toString() === "2,3" ]]></assert>
			<assert><![CDATA[ oDFA.A.toString() === "a,b" ]]></assert>
			<assert><![CDATA[ oDFA.S.toString() === "1,2,3" ]]></assert>
			<assert><![CDATA[ oDFA.T.length === 2 ]]></assert>
			<assert><![CDATA[ oDFA.T.join('|') === '1,a,2|1,b,3' ]]></assert>
			<assert><![CDATA[ oDFA.aTokensID.length === 2 ]]></assert>
			<assert><![CDATA[ oDFA.aTokensID.join('|') === 'letter_a,2|letter_b,3' ]]></assert>
			<assert><![CDATA[ oDFA.M ]]></assert>
		</assertions>
		<assertions name="erreur ...un token est perdu...">
			<value><![CDATA[
oDFA = DFA.aggregate( oDFA, f('a') )
			]]></value>
			<assert><![CDATA[ oDFA.sError ]]></assert>
			<assert><![CDATA[ oDFA ]]></assert>
			<assert><![CDATA[ oDFA.I === 1 ]]></assert>
			<assert><![CDATA[ oDFA.F.toString() === "2,3" ]]></assert>
			<assert><![CDATA[ oDFA.A.toString() === "a,b" ]]></assert>
			<assert><![CDATA[ oDFA.S.toString() === "1,2,3" ]]></assert>
			<assert><![CDATA[ oDFA.T.length === 2 ]]></assert>
			<assert><![CDATA[ oDFA.T.join('|') === '1,a,2|1,b,3' ]]></assert>
			<assert><![CDATA[ oDFA.aTokensID.length === 2 ]]></assert>
			<assert><![CDATA[ oDFA.aTokensID.join('|') === 'letter_a,2|letter_b,3' ]]></assert>
			<assert><![CDATA[ oDFA.M ]]></assert>
		</assertions>
		<assertions name="... sans erreur">
			<value><![CDATA[
oDFA = DFA.aggregate( oDFA, f('c') )
			]]></value>
			<assert><![CDATA[ ! oDFA.sError ]]></assert>
			<assert><![CDATA[ oDFA ]]></assert>
			<assert><![CDATA[ oDFA.I === 1 ]]></assert>
			<assert><![CDATA[ oDFA.F.toString() === "2,3,4" ]]></assert>
			<assert><![CDATA[ oDFA.A.toString() === "a,b,c" ]]></assert>
			<assert><![CDATA[ oDFA.S.toString() === "1,2,3,4" ]]></assert>
			<assert><![CDATA[ oDFA.T.length === 3 ]]></assert>
			<assert><![CDATA[ oDFA.T.join('|') === '1,a,2|1,b,3|1,c,4' ]]></assert>
			<assert><![CDATA[ oDFA.aTokensID.length === 3 ]]></assert>
			<assert><![CDATA[ oDFA.aTokensID.join('|') === 'letter_a,2|letter_b,3|letter_c,4' ]]></assert>
			<assert><![CDATA[ oDFA.M ]]></assert>
		</assertions>
	</test>
	
	
	<test name="Minimisation" class="preambule">
		<assertions>
		<desc>Automate minimisable</desc>
			<value><![CDATA[
var makeDFA = function(){
	var oFA = new DFA( Automate.or(
	    Automate.makeChar( 'a' ),
	    Automate.makeChar( 'b' ),
	    Automate.makeChar( 'c' )
	    ))
	return oFA.renameStates()
	}
var oDFAMinimized
			]]></value>
		</assertions>
		<assertions>
			<desc>Teste la longueur (Array) d'attributs de l'automate</desc>
			<value><![CDATA[
var FAST = function( nF, nA, nS, nT ){
	return oDFA.F.length === nF
	    && oDFA.A.length === nA
	    && oDFA.S.length === nS
	    && oDFA.T.length === nT
	    && oDFA
	}
			]]></value>
		</assertions>
		<assertions>
			<desc>
Automate non minimisable :<br/>
à chaque état final est associé un nom de token...
			</desc>
			<value><![CDATA[
var makeDFA2 = function(){
	var oFA = new DFA( Automate.or(
	    f( 'a' ),
	    f( 'b' ),
	    f( 'c' )
	    ))
	return oFA.renameStates()
	}
			]]></value>
		</assertions>
	</test>
	<test name="DFA.prototype.minimize">
		<desc><a href="../../../AFD.info.htm">DFA: minimisation</a></desc>
		<assertions name="avant">
			<value><![CDATA[
oDFA = makeDFA()
			]]></value>
			<assert><![CDATA[ FAST( 3, 3, 4, 3 ) ]]></assert>
			<assert><![CDATA[ oDFA.A.toString() === "a,b,c" ]]></assert>
		</assertions>
		<assertions name="après">
			<value><![CDATA[
oDFAMinimized = oDFA.minimize()
			]]></value>
			<assert><![CDATA[ FAST( 1, 1, 2, 1 ) ]]></assert>
			<assert><![CDATA[ oDFA.A.toString() === "[abc]" ]]></assert>
			<assert><![CDATA[ oDFA === oDFAMinimized ]]></assert>
		</assertions>
	</test>
	<test name="DFA.prototype.minimizeA">
		<desc>Réduction de l'alphabet.</desc>
		<assertions name="Pas de réduction possible">
			<value><![CDATA[
oDFA = makeDFA().minimizeA()
			]]></value>
			<assert><![CDATA[ FAST( 3, 3, 4, 3 ) ]]></assert>
			<assert><![CDATA[ oDFA.A.toString() === "a,b,c" ]]></assert>
		</assertions>
		<assertions name="Cas réduction possible">
			<value><![CDATA[
oDFA.minimizeS()
			]]></value>
			<assert><![CDATA[ FAST( 1, 3, 2, 3 ) ]]></assert>
		</assertions>
		<assertions name="Réduction">
			<value><![CDATA[
oDFA.minimizeA()
			]]></value>
			<assert><![CDATA[ FAST( 1, 1, 2, 1 ) ]]></assert>
			<assert><![CDATA[ oDFA.A.toString() === "[abc]" ]]></assert>
		</assertions>
	</test>
	<test name="DFA.prototype.minimizeS">
		<desc>Réduction du nombre d'état.</desc>
		<assertions name="avant">
			<value><![CDATA[
oDFA = makeDFA()
	]]></value>
			<assert><![CDATA[ FAST( 3, 3, 4, 3 ) ]]></assert>
			<assert><![CDATA[ oDFA.A.toString() === "a,b,c" ]]></assert>
		</assertions>
		<assertions name="après">
			<value><![CDATA[
oDFA.minimizeS()
	]]></value>
			<assert><![CDATA[ FAST( 1, 3, 2, 3 ) ]]></assert>
			<assert><![CDATA[ oDFA.A.toString() === "a,b,c" ]]></assert>
		</assertions>
		<assertions name="avant">
			<value><![CDATA[
oDFA = makeDFA2()
	]]></value>
			<assert><![CDATA[ FAST( 3, 3, 4, 3 ) ]]></assert>
		</assertions>
		<assertions name="après">
			<value><![CDATA[
oDFA.minimizeS()
	]]></value>
			<assert><![CDATA[ FAST( 3, 3, 4, 3 ) ]]></assert>
		</assertions>
	</test>

</truth>