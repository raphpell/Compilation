<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet type="text/xsl" href="UnitTest.xsl"?> 

<truth name="Objet Automate">
	<script src="../../../js/framework.js"></script>
	<script src="../../../js/automaton.js"></script>
	<desc>...</desc>

	<test name="Préambule" class="preambule">
		<desc>Environnement de test...</desc>
		<assertions name="Affectation des variables oFA et oDFA">
			<desc>Création depuis une fonction générant un automate... </desc>
			<value><![CDATA[
var oFA, oDFA
var Test =function( fGetFA ){
	Automate.setUniqueID( 1 )
	oDFA = new DFA( oFA = fGetFA () )
	}
			]]></value>
		</assertions>
	</test>
	
	<test name="Méthodes internes" class="preambule"></test>
	<test name="Automate.action">
		<assertions>
			<desc>Ensemble de caractère.</desc>
			<value><![CDATA[
var f = Automate.action( 'abc' )
			]]></value>
			<assert><![CDATA[ f.toString() === '[abc]' ]]></assert>
			<assert><![CDATA[ f('D', 10 ) === -1 ]]></assert>
			<assert><![CDATA[ f('a', 10 ) === 10 ]]></assert>
			<assert><![CDATA[ f('b', 10 ) === 10 ]]></assert>
			<assert><![CDATA[ f('c', 10 ) === 10 ]]></assert>
		</assertions>
		<assertions>
			<desc>Ensemble de caractère négatif.</desc>
			<value><![CDATA[
var f = Automate.action( 'abc', true )
			]]></value>
			<assert><![CDATA[ f.toString() === '[^abc]' ]]></assert>
			<assert><![CDATA[ f('D', 10 ) === 10 ]]></assert>
			<assert><![CDATA[ f('a', 10 ) === -1 ]]></assert>
			<assert><![CDATA[ f('b', 10 ) === -1 ]]></assert>
			<assert><![CDATA[ f('c', 10 ) === -1 ]]></assert>
		</assertions>
	</test>
	<test name="Automate.getUniqueID">
		<assertions>
			<assert><![CDATA[ Automate.getUniqueID() === 1 ]]></assert>
			<assert><![CDATA[ Automate.getUniqueID() === 2 ]]></assert>
			<assert><![CDATA[ Automate.getUniqueID() === 3 ]]></assert>
		</assertions>
	</test>
	<test name="Automate.setUniqueID">
		<assertions>
			<assert><![CDATA[ ! Automate.setUniqueID( 1 ) ]]></assert>
			<assert><![CDATA[ Automate.getUniqueID() === 1 ]]></assert>
			<assert><![CDATA[ ! Automate.setUniqueID( 10 ) ]]></assert>
			<assert><![CDATA[ Automate.getUniqueID() === 10 ]]></assert>
			<assert><![CDATA[ ! Automate.setUniqueID( 0 ) ]]></assert>
			<assert><![CDATA[ Automate.getUniqueID() === 11 ]]></assert>
		</assertions>
	</test>

	<test name="Générateur d'automate" class="preambule"></test>
	<test name="Automate.fromChar">
		<desc>
Générateur créées avec <code>Automate.fromChar</code>:
<code><ul>
	<li>NFA['\\n'] = Automate.fromChar('\n')</li>
	<li>NFA['\\t'] = Automate.fromChar('\t')</li>
	<li>NFA['\\f'] = Automate.fromChar('\f')</li>
	<li>NFA['\\r'] = Automate.fromChar('\r')</li>
	<li>NFA['\\v'] = Automate.fromChar('\v')</li>
</ul></code>
		</desc>
		<assertions>
			<value><![CDATA[
Test( Automate.fromChar('\n'))
			]]></value>
			<assert><![CDATA[ oFA.I === 1 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "2" ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === "\n" ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "1,2" ]]></assert>
			<assert><![CDATA[ oFA.T.length === 1 ]]></assert>
			<assert><![CDATA[ oFA.T[0].toString() === "1,\n,2" ]]></assert>
			<assert><![CDATA[ oFA.aTokensID.length === 0 ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
			<assert><![CDATA[ oDFA.test( '\naaa' ) === '\n' ]]></assert>
			<assert><![CDATA[ oDFA.test( '\naaa', 2 ) === null ]]></assert>
		</assertions>
		<assertions>
			<value><![CDATA[
var oFA2 =  Automate.fromChar('\n')()
			]]></value>
			<assert><![CDATA[ oFA2.I === 3 ]]></assert>
			<assert><![CDATA[ oFA2.F.toString() === "4" ]]></assert>
			<assert><![CDATA[ oFA2.A.toString() === "\n" ]]></assert>
			<assert><![CDATA[ oFA2.S.toString() === "3,4" ]]></assert>
			<assert><![CDATA[ oFA2.T.length === 1 ]]></assert>
			<assert><![CDATA[ oFA2.T[0].toString() === "3,\n,4" ]]></assert>
			<assert><![CDATA[ oFA2.aTokensID.length === 0 ]]></assert>
			<assert><![CDATA[ ! oFA2.M ]]></assert>
		</assertions>
	</test>
	<test name="Automate.fromCharClass">
		<assertions name="Ensemble de caractère">
			<desc></desc>
			<value><![CDATA[
Test( Automate.fromCharClass( ['a','b','c'] ))
			]]></value>
			<assert><![CDATA[ oFA.I === 1 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "2" ]]></assert>
			<assert><![CDATA[ oFA.A.length === 1 ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === "[abc]" ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "1,2" ]]></assert>
			<assert><![CDATA[ oFA.T.length === 1 ]]></assert>
			<assert><![CDATA[ oFA.T[0].toString() === "1,[abc],2,[abc]" ]]></assert>
			<assert><![CDATA[ oFA.T[0][3]('b', 10 ) === 10 ]]></assert>
			<assert><![CDATA[ oFA.T[0][3]('D', 10 ) === -1 ]]></assert>
			<assert><![CDATA[ oFA.aTokensID.length === 0 ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
		</assertions>
		<assertions name="Ensemble de caractère négatif">
			<desc></desc>
			<value><![CDATA[
Test( Automate.fromCharClass( ['a','b','c'], true ))
			]]></value>
			<assert><![CDATA[ oFA.I === 1 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "2" ]]></assert>
			<assert><![CDATA[ oFA.A.length === 1 ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === "[^abc]" ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "1,2" ]]></assert>
			<assert><![CDATA[ oFA.T.length === 1 ]]></assert>
			<assert><![CDATA[ oFA.T[0].toString() === "1,[^abc],2,[^abc]" ]]></assert>
			<assert><![CDATA[ oFA.T[0][3]('b', 10 ) === -1 ]]></assert>
			<assert><![CDATA[ oFA.T[0][3]('D', 10 ) === 10 ]]></assert>
			<assert><![CDATA[ oFA.aTokensID.length === 0 ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
		</assertions>
	</test>

	<test name="Automates basiques" class="preambule"></test>
	<test name="Automate.makeEmpty">
		<assertions>
			<value><![CDATA[
Test( function(){
return Automate.makeEmpty()
})
			]]></value>
			<assert><![CDATA[ oFA.I === 1 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "2" ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === EPSILON ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "1,2" ]]></assert>
			<assert><![CDATA[ oFA.T.toString() === "1,"+EPSILON+",2" ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
		</assertions>
		<assertions>
			<value><![CDATA[
oFA = Automate.makeEmpty( 11, 12 )
			]]></value>
			<assert><![CDATA[ oFA.I === 11 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "12" ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === EPSILON ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "11,12" ]]></assert>
			<assert><![CDATA[ oFA.T.toString() === "11,"+EPSILON+",12" ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
		</assertions>
	</test>
	<test name="Automate.makeChar">
		<assertions>
			<value><![CDATA[
Test( function(){
return Automate.makeChar( '\n' )
})
			]]></value>
			<assert><![CDATA[ oFA.I === 1 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "2" ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === '\n' ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "1,2" ]]></assert>
			<assert><![CDATA[ oFA.T.toString() === "1,\n,2" ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
		</assertions>
		<assertions>
			<value><![CDATA[
oFA = Automate.makeChar( '\n', 11, 12 )
			]]></value>
			<assert><![CDATA[ oFA.I === 11 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "12" ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === '\n' ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "11,12" ]]></assert>
			<assert><![CDATA[ oFA.T.toString() === "11,\n,12" ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
		</assertions>
	</test>
	<test name="Automate.makeAnyChar">
		<assertions>
			<value><![CDATA[
Test( function(){
return Automate.makeAnyChar()
})
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oFA.I === 1 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "2" ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === '[a],[^a]' ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "1,2" ]]></assert>
			<assert><![CDATA[ oFA.T[0].toString() === "1,[a],2,[a]" ]]></assert>
			<assert><![CDATA[ oFA.T[1].toString() === "1,[^a],2,[^a]" ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
		</assertions>
		<assertions>
			<value><![CDATA[
oFA = Automate.makeAnyChar( '¤', 11, 12 )
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oFA.I === 11 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "12" ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === '[¤],[^¤]' ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "11,12" ]]></assert>
			<assert><![CDATA[ oFA.T[0].toString() === "11,[¤],12,[¤]" ]]></assert>
			<assert><![CDATA[ oFA.T[1].toString() === "11,[^¤],12,[^¤]" ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
		</assertions>
	</test>
	<test name="Automate.makeCharSet">
		<assertions>
			<value><![CDATA[
Test( function(){
return Automate.makeCharSet(['a','b','c'])
})
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oFA.I === 1 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "2" ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === '[abc]' ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "1,2" ]]></assert>
			<assert><![CDATA[ oFA.T[0].toString() === "1,[abc],2,[abc]" ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
		</assertions>
		<assertions>
			<value><![CDATA[
oFA = Automate.makeCharSet(['a','b','c'] , true, 11, 12 )
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oFA.I === 11 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "12" ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === '[^abc]' ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "11,12" ]]></assert>
			<assert><![CDATA[ oFA.T[0].toString() === "11,[^abc],12,[^abc]" ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
		</assertions>
	</test>
	<test name="Automate.makeCharRange">
		<assertions>
			<value><![CDATA[
Test( function(){
return Automate.makeCharRange( 'a', 'c' )
}) 
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oFA.I === 1 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "2" ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === '[abc]' ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "1,2" ]]></assert>
			<assert><![CDATA[ oFA.T[0].toString() === "1,[abc],2,[abc]" ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
		</assertions>
		<assertions>
			<value><![CDATA[
oFA = Automate.makeCharRange( 'a', 'c', 11, 12 )
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oFA.I === 11 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "12" ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === '[abc]' ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "11,12" ]]></assert>
			<assert><![CDATA[ oFA.T[0].toString() === "11,[abc],12,[abc]" ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
		</assertions>
	</test>
	<test name="Automate.makeString">
		<assertions>
			<value><![CDATA[
Test( function(){
return Automate.makeString( 'red car' )
}) 
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oDFA ]]></assert>
			<assert><![CDATA[ oDFA.test( 'blue') === null ]]></assert>
			<assert><![CDATA[ oDFA.test( 'red car|') === 'red car' ]]></assert>
		</assertions>
	</test>
	
	<test name="Opérations basiques" class="preambule">
		<desc>Automates tests :</desc>
		<assertions><desc>Création d'un automate avec 1 état final depuis un caractère</desc>
			<value><![CDATA[
var f1 =function( sChar ){ return Automate.makeChar( sChar ) }
			]]></value>
		</assertions>
		<assertions><desc>Création d'un automate avec 2 états finaux</desc>
			<value><![CDATA[
var f2 =function(){
	var s1 = Automate.getUniqueID()
	var s2 = Automate.getUniqueID()
	var s3 = Automate.getUniqueID()
	var s4 = Automate.getUniqueID()
	return new Automate(
		s1,
		[s3,s4],
		['L','u','à'],
		[s1,s2,s3,s4],
		[[s1,'L',s2],[s2,'u',s3],[s2,'à',s4]]
		)
	}
Test( f2 )
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oDFA ]]></assert>
			<assert><![CDATA[ oDFA.test( "LuLu" ) === "Lu" ]]></assert>
			<assert><![CDATA[ oDFA.test( "Luu" ) === "Lu" ]]></assert>
			<assert><![CDATA[ oDFA.test( "LàLà" ) === "Là" ]]></assert>
			<assert><![CDATA[ oDFA.test( "Làà" ) === "Là" ]]></assert>
		</assertions>
	</test>
	<test name="Automate.and">
		<assertions>
			<value><![CDATA[
Test( function(){
return Automate.and( f1('a'), f1('b'), f1('c'))
})
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oFA.I === 1 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "6" ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === EPSILON+',a,b,c' ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "1,2,3,4,5,6" ]]></assert>
			<assert><![CDATA[ oFA.T.length === 5 ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
			<assert><![CDATA[ oDFA.test( "abc|" ) === "abc" ]]></assert>
		</assertions>
		<assertions>
			<value><![CDATA[
Test( function(){
return Automate.and( f2(), f2() )
})
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oDFA ]]></assert>
			<assert><![CDATA[ oDFA.test( "LuLuLà" ) === "LuLu" ]]></assert>
			<assert><![CDATA[ oDFA.test( "LàLàLu" ) === "LàLà" ]]></assert>
			<assert><![CDATA[ oDFA.test( "LuLàLà" ) === "LuLà" ]]></assert>
			<assert><![CDATA[ oDFA.test( "LàLuLu" ) === "LàLu" ]]></assert>
			<assert><![CDATA[ oDFA.test( "LuLuu" ) === "LuLu" ]]></assert>
			<assert><![CDATA[ oDFA.test( "LàLàà" ) === "LàLà" ]]></assert>
		</assertions>
	</test>
	<test name="Automate.or">
		<assertions>
			<value><![CDATA[
Test( function(){
return Automate.or( f1('a'), f1('b'), f1('c'))
})
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oFA.I === 7 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "8" ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === EPSILON+',a,b,c' ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "1,2,3,4,5,6,7,8" ]]></assert>
			<assert><![CDATA[ oFA.T.length === 9 ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
			<assert><![CDATA[ oDFA.test( "abc" ) === "a" ]]></assert>
		</assertions>
		<assertions>
			<value><![CDATA[
Test( function(){
return Automate.or( f2(), f1('A') )
})
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oDFA ]]></assert>
			<assert><![CDATA[ oDFA.test( "LuLuLà" ) === "Lu" ]]></assert>
			<assert><![CDATA[ oDFA.test( "LàLàLu" ) === "Là" ]]></assert>
			<assert><![CDATA[ oDFA.test( "Allô" ) === "A" ]]></assert>
			<assert><![CDATA[ oDFA.test( "Ops" ) === null ]]></assert>
		</assertions>
	</test>
	<test name="Automate.optional">
		<assertions>
			<value><![CDATA[
Test( function(){
return Automate.optional( f1('a'))
})
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oFA.I === 1 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "2" ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === EPSILON+',a' ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "1,2" ]]></assert>
			<assert><![CDATA[ oFA.T[0].toString() === "1,a,2" ]]></assert>
			<assert><![CDATA[ oFA.T[1].toString() === "1,"+EPSILON+",2" ]]></assert>
			<assert><![CDATA[ oDFA.test( "|" ) === "" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaa" ) === "a" ]]></assert>
		</assertions>
		<assertions>
			<value><![CDATA[
Test( function(){
return Automate.optional( f2() )
})
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oDFA ]]></assert>
			<assert><![CDATA[ oDFA.test( "|" ) === "" ]]></assert>
			<assert><![CDATA[ oDFA.test( "Lu" ) === "Lu" ]]></assert>
			<assert><![CDATA[ oDFA.test( "LuuLu" ) === "Lu" ]]></assert>
			<assert><![CDATA[ oDFA.test( "LuLuLu" ) === "Lu" ]]></assert>
			<assert><![CDATA[ oDFA.test( "Là" ) === "Là" ]]></assert>
			<assert><![CDATA[ oDFA.test( "LààLà" ) === "Là" ]]></assert>
			<assert><![CDATA[ oDFA.test( "LàLàLà" ) === "Là" ]]></assert>
		</assertions>
	</test>
	<test name="Automate.repeat">
		<desc>Faire d'autres tests ?</desc>
		<assertions>
			<desc>0..n</desc>
			<value><![CDATA[
Test( function(){
return Automate.repeat( f1('a'))
})
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oDFA.test( "|" ) === "" ]]></assert>
			<assert><![CDATA[ oDFA.test( "a|" ) === "a" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aa|" ) === "aa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaa|" ) === "aaa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaaa|" ) === "aaaa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaaaa|" ) === "aaaaa" ]]></assert>
		</assertions>
		<assertions>
			<desc>1..n</desc>
			<value><![CDATA[
Test( function(){
return Automate.repeat( f1('a'), 1 )
})
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oDFA.test( "|" ) === null ]]></assert>
			<assert><![CDATA[ oDFA.test( "a|" ) === "a" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aa|" ) === "aa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaa|" ) === "aaa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaaa|" ) === "aaaa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaaaa|" ) === "aaaaa" ]]></assert>
		</assertions>
		<assertions>
			<desc>2..n</desc>
			<value><![CDATA[
Test( function(){
return Automate.repeat( f1('a'), 2 )
})
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oDFA.test( "|" ) === null ]]></assert>
			<assert><![CDATA[ oDFA.test( "a|" ) === null ]]></assert>
			<assert><![CDATA[ oDFA.test( "aa|" ) === "aa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaa|" ) === "aaa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaaa|" ) === "aaaa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaaaa|" ) === "aaaaa" ]]></assert>
		</assertions>
		<assertions>
			<desc>2..3</desc>
			<value><![CDATA[
Test( function(){
return Automate.repeat( f1('a'), 2, 3 )
})
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oDFA.test( "|" ) === null ]]></assert>
			<assert><![CDATA[ oDFA.test( "a|" ) === null ]]></assert>
			<assert><![CDATA[ oDFA.test( "aa|" ) === "aa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaa|" ) === "aaa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaaa|" ) === "aaa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaaaa|" ) === "aaa" ]]></assert>
		</assertions>
		<assertions>
			<desc>4</desc>
			<value><![CDATA[
Test( function(){
return Automate.repeat( f1('a'), 4, 4 )
})
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oDFA.test( "|" ) === null ]]></assert>
			<assert><![CDATA[ oDFA.test( "a|" ) === null ]]></assert>
			<assert><![CDATA[ oDFA.test( "aa|" ) === null ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaa|" ) === null ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaaa|" ) === "aaaa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaaaa|" ) === "aaaa" ]]></assert>
		</assertions>
	</test>
	<test name="Automate.repeat0n">
		<assertions>
			<value><![CDATA[
Test( function(){
return Automate.repeat0n( f1('a'))
})
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oDFA.test( "|" ) === "" ]]></assert>
			<assert><![CDATA[ oDFA.test( "a|" ) === "a" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aa|" ) === "aa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaa|" ) === "aaa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaaa|" ) === "aaaa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaaaa|" ) === "aaaaa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaaaaa|" ) === "aaaaaa" ]]></assert>
		</assertions>
		<assertions>
			<value><![CDATA[
Test( function(){
return Automate.repeat0n( f2() )
})
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oDFA.test( "|" ) === "" ]]></assert>
			<assert><![CDATA[ oDFA.test( "Lu|" ) === "Lu" ]]></assert>
			<assert><![CDATA[ oDFA.test( "LuLu|" ) === "LuLu" ]]></assert>
			<assert><![CDATA[ oDFA.test( "LuLuLuu" ) === "LuLuLu" ]]></assert>
			<assert><![CDATA[ oDFA.test( "Là|" ) === "Là" ]]></assert>
			<assert><![CDATA[ oDFA.test( "LàLà|" ) === "LàLà" ]]></assert>
			<assert><![CDATA[ oDFA.test( "LàLàLàà" ) === "LàLàLà" ]]></assert>
		</assertions>
	</test>
</truth>