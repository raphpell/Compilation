<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet type="text/xsl" href="UnitTest.xsl"?> 

<truth name="Objet Automate">
	<script src="../../../js/framework.js"></script>
	<script src="../../../js/automaton.js"></script>
	 <desc>...</desc>

	<test name="Automate.action">
		<assertions>
			<desc>Ensemble de caractère.</desc>
			<value><![CDATA[
var f = Automate.action( 'abc' )
			]]></value>
			<assert><![CDATA[ f.toString() === '[abc]' ]]></assert>
			<assert><![CDATA[ f('D', 10 ) === -1 ]]></assert>
			<assert><![CDATA[ f('a', 10 ) === 10 ]]></assert>
			<assert><![CDATA[ f('b', 10 ) === 10 ]]></assert>
			<assert><![CDATA[ f('c', 10 ) === 10 ]]></assert>
		</assertions>
		<assertions>
			<desc>Ensemble de caractère négatif.</desc>
			<value><![CDATA[
var f = Automate.action( 'abc', true )
			]]></value>
			<assert><![CDATA[ f.toString() === '[^abc]' ]]></assert>
			<assert><![CDATA[ f('D', 10 ) === 10 ]]></assert>
			<assert><![CDATA[ f('a', 10 ) === -1 ]]></assert>
			<assert><![CDATA[ f('b', 10 ) === -1 ]]></assert>
			<assert><![CDATA[ f('c', 10 ) === -1 ]]></assert>
		</assertions>
	</test>
	<test name="Automate.getUniqueID">
		<assertions>
			<assert><![CDATA[ Automate.getUniqueID() === 1 ]]></assert>
			<assert><![CDATA[ Automate.getUniqueID() === 2 ]]></assert>
			<assert><![CDATA[ Automate.getUniqueID() === 3 ]]></assert>
		</assertions>
	</test>
	<test name="Automate.setUniqueID">
		<assertions>
			<value><![CDATA[
Automate.setUniqueID( 1 )
			]]></value>
			<assert><![CDATA[ Automate.getUniqueID() === 1 ]]></assert>
		</assertions>
		<assertions>
			<value><![CDATA[
Automate.setUniqueID( 0 )
			]]></value>
			<assert><![CDATA[ Automate.getUniqueID() === 2 ]]></assert>
		</assertions>
	</test>
	<test name="Automate.wrapper">
		<assertions>
			<value><![CDATA[

			]]></value>
			<assert><![CDATA[ true ]]></assert>
		</assertions>
	</test>

	<test name="Automate.fromChar">
		<hr/>
		<desc>
Méthodes créées avec <code>Automate.fromChar</code>:
<code><ul>
	<li>Automate['\\n'] = Automate.fromChar('\n')</li>
	<li>Automate['\\t'] = Automate.fromChar('\t')</li>
	<li>Automate['\\f'] = Automate.fromChar('\f')</li>
	<li>Automate['\\r'] = Automate.fromChar('\r')</li>
	<li>Automate['\\v'] = Automate.fromChar('\v')</li>
</ul></code>
		</desc>
		<assertions>
			<value><![CDATA[
Automate.setUniqueID( 1 )
var f = Automate['\\n']
			]]></value>
		</assertions>
		<assertions>
			<value><![CDATA[
var oFA1 = f()
var oDFA1 = new DFA( oFA1 )
			]]></value>
			<assert><![CDATA[ oFA1.I === 1 ]]></assert>
			<assert><![CDATA[ oFA1.F.toString() === "2" ]]></assert>
			<assert><![CDATA[ oFA1.A.toString() === "\n" ]]></assert>
			<assert><![CDATA[ oFA1.S.toString() === "1,2" ]]></assert>
			<assert><![CDATA[ oFA1.T.length === 1 ]]></assert>
			<assert><![CDATA[ oFA1.T[0].toString() === "1,\n,2" ]]></assert>
			<assert><![CDATA[ oFA1.aTokensID.length === 0 ]]></assert>
			<assert><![CDATA[ ! oFA1.M ]]></assert>
			<assert><![CDATA[ oDFA1.test( '\naaa' ) === '\n' ]]></assert>
			<assert><![CDATA[ oDFA1.test( '\naaa', 2 ) === null ]]></assert>
		</assertions>
		<assertions>
			<value><![CDATA[
var oFA2 = f()
			]]></value>
			<assert><![CDATA[ oFA2.I === 3 ]]></assert>
			<assert><![CDATA[ oFA2.F.toString() === "4" ]]></assert>
			<assert><![CDATA[ oFA2.A.toString() === "\n" ]]></assert>
			<assert><![CDATA[ oFA2.S.toString() === "3,4" ]]></assert>
			<assert><![CDATA[ oFA2.T.length === 1 ]]></assert>
			<assert><![CDATA[ oFA2.T[0].toString() === "3,\n,4" ]]></assert>
			<assert><![CDATA[ oFA2.aTokensID.length === 0 ]]></assert>
			<assert><![CDATA[ ! oFA2.M ]]></assert>
		</assertions>
	</test>
	<test name="Automate.fromCharClass">
		<desc>
Méthodes créées avec <code>Automate.fromCharClass</code>:
<ul>
	<li><b>Ensemble de caractère.</b>
		<code><ul>
			<li>Automate['\\d'] = Automate.fromCharClass( NUMBERS, 0)</li>
			<li>Automate['\\s'] ...</li>
			<li>Automate['\\w'] ...</li>
		</ul></code></li>
	<li><b>Ensemble de caractère négatif.</b>
		<code><ul>
			<li>Automate['\\D'] = Automate.fromCharClass( NUMBERS, 1)</li>
			<li>Automate['\\S'] ...</li>
			<li>Automate['\\W'] ...</li>
		</ul></code></li>
</ul>
avec NUMBERS = '0123456789'.split('')
		</desc>
		<assertions>
			<desc>Ensemble de caractère.</desc>
			<value><![CDATA[
Automate.setUniqueID( 5 )
var f = Automate.fromCharClass( ['a','b','c'] )
var oFA3 = f()
			]]></value>
			<assert><![CDATA[ oFA3.I === 5 ]]></assert>
			<assert><![CDATA[ oFA3.F.toString() === "6" ]]></assert>
			<assert><![CDATA[ oFA3.A.length === 1 ]]></assert>
			<assert><![CDATA[ oFA3.A.toString() === "[abc]" ]]></assert>
			<assert><![CDATA[ oFA3.S.toString() === "5,6" ]]></assert>
			<assert><![CDATA[ oFA3.T.length === 1 ]]></assert>
			<assert><![CDATA[ oFA3.T[0].toString() === "5,[abc],6,[abc]" ]]></assert>
			<assert><![CDATA[ oFA3.T[0][3]('b', 10 ) === 10 ]]></assert>
			<assert><![CDATA[ oFA3.T[0][3]('D', 10 ) === -1 ]]></assert>
			<assert><![CDATA[ oFA3.aTokensID.length === 0 ]]></assert>
			<assert><![CDATA[ ! oFA3.M ]]></assert>
		</assertions>
		<assertions>
			<desc>Ensemble de caractère négatif.</desc>
			<value><![CDATA[
var f = Automate.fromCharClass( ['a','b','c'], true )
var oFA4 = f()
			]]></value>
			<assert><![CDATA[ oFA4.I === 7 ]]></assert>
			<assert><![CDATA[ oFA4.F.toString() === "8" ]]></assert>
			<assert><![CDATA[ oFA4.A.length === 1 ]]></assert>
			<assert><![CDATA[ oFA4.A.toString() === "[^abc]" ]]></assert>
			<assert><![CDATA[ oFA4.S.toString() === "7,8" ]]></assert>
			<assert><![CDATA[ oFA4.T.length === 1 ]]></assert>
			<assert><![CDATA[ oFA4.T[0].toString() === "7,[^abc],8,[^abc]" ]]></assert>
			<assert><![CDATA[ oFA4.T[0][3]('b', 10 ) === -1 ]]></assert>
			<assert><![CDATA[ oFA4.T[0][3]('D', 10 ) === 10 ]]></assert>
			<assert><![CDATA[ oFA4.aTokensID.length === 0 ]]></assert>
			<assert><![CDATA[ ! oFA4.M ]]></assert>
		</assertions>
	</test>

	<test name="Automate.makeEmpty">
		<hr/>
		<assertions>
			<value><![CDATA[
Automate.setUniqueID( 1 )
var oFA = Automate.makeEmpty()
			]]></value>
			<assert><![CDATA[ oFA.I === 1 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "2" ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === EPSILON ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "1,2" ]]></assert>
			<assert><![CDATA[ oFA.T.toString() === "1,"+EPSILON+",2" ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
		</assertions>
		<assertions>
			<value><![CDATA[
var oFA = Automate.makeEmpty( 1, 2 )
			]]></value>
			<assert><![CDATA[ oFA.I === 1 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "2" ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === EPSILON ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "1,2" ]]></assert>
			<assert><![CDATA[ oFA.T.toString() === "1,"+EPSILON+",2" ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
		</assertions>
	</test>
	<test name="Automate.makeChar">
		<assertions>
			<value><![CDATA[
Automate.setUniqueID( 1 )
var oFA = Automate.makeChar( '\n' )
			]]></value>
			<assert><![CDATA[ oFA.I === 1 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "2" ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === '\n' ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "1,2" ]]></assert>
			<assert><![CDATA[ oFA.T.toString() === "1,\n,2" ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
		</assertions>
		<assertions>
			<value><![CDATA[
var oFA = Automate.makeChar( '\n', 1, 2 )
			]]></value>
			<assert><![CDATA[ oFA.I === 1 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "2" ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === '\n' ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "1,2" ]]></assert>
			<assert><![CDATA[ oFA.T.toString() === "1,\n,2" ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
		</assertions>
	</test>
	<test name="Automate.makeAnyChar">
		<assertions>
			<value><![CDATA[
Automate.setUniqueID( 1 )
var oFA = Automate.makeAnyChar()
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oFA.I === 1 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "2" ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === '[a],[^a]' ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "1,2" ]]></assert>
			<assert><![CDATA[ oFA.T[0].toString() === "1,[a],2,[a]" ]]></assert>
			<assert><![CDATA[ oFA.T[1].toString() === "1,[^a],2,[^a]" ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
		</assertions>
		<assertions>
			<value><![CDATA[
var oFA = Automate.makeAnyChar( '¤', 1, 2 )
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oFA.I === 1 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "2" ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === '[¤],[^¤]' ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "1,2" ]]></assert>
			<assert><![CDATA[ oFA.T[0].toString() === "1,[¤],2,[¤]" ]]></assert>
			<assert><![CDATA[ oFA.T[1].toString() === "1,[^¤],2,[^¤]" ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
		</assertions>
	</test>
	<test name="Automate.makeCharSet">
		<assertions>
			<value><![CDATA[
Automate.setUniqueID( 1 )
var oFA = Automate.makeCharSet(['a','b','c'])
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oFA.I === 1 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "2" ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === '[abc]' ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "1,2" ]]></assert>
			<assert><![CDATA[ oFA.T[0].toString() === "1,[abc],2,[abc]" ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
		</assertions>
		<assertions>
			<value><![CDATA[
var oFA = Automate.makeCharSet(['a','b','c'] , true, 1, 2 )
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oFA.I === 1 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "2" ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === '[^abc]' ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "1,2" ]]></assert>
			<assert><![CDATA[ oFA.T[0].toString() === "1,[^abc],2,[^abc]" ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
		</assertions>
	</test>
	<test name="Automate.makeCharRange">
		<assertions>
			<value><![CDATA[
Automate.setUniqueID( 1 )
var oFA = Automate.makeCharRange( 'a', 'c' )
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oFA.I === 1 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "2" ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === '[abc]' ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "1,2" ]]></assert>
			<assert><![CDATA[ oFA.T[0].toString() === "1,[abc],2,[abc]" ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
		</assertions>
		<assertions>
			<value><![CDATA[
var oFA = Automate.makeCharRange( 'a', 'c', 1, 2 )
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oFA.I === 1 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "2" ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === '[abc]' ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "1,2" ]]></assert>
			<assert><![CDATA[ oFA.T[0].toString() === "1,[abc],2,[abc]" ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
		</assertions>
	</test>

	<test name="Préambules au opérations basiques">
		<hr/>
		<assertions>
			<desc>Automate avec 2 états finaux</desc>
			<value><![CDATA[
var oFA_LuLa = new Automate(
	1,
	[3,4],
	['L','u','à'],
	[1,2,3,4],
	[[1,'L',2],[2,'u',3],[2,'à',4]]
	)
var oDFA = new DFA ( oFA_LuLa )
			]]></value>
			<assert><![CDATA[ oFA_LuLa ]]></assert>
			<assert><![CDATA[ oDFA ]]></assert>
			<assert><![CDATA[ oDFA.test( "LuLu" ) === "Lu" ]]></assert>
			<assert><![CDATA[ oDFA.test( "LàLà" ) === "Là" ]]></assert>
		</assertions>
		<assertions>
			<desc>Automate pour caractère</desc>
			<value><![CDATA[
var f =function( sChar ){ return Automate.makeChar( sChar ) }
			]]></value>
		</assertions>
	</test>
	<test name="Automate.and">
		<assertions>
			<value><![CDATA[
Automate.setUniqueID( 1 )
var oFA = Automate.and( f('a'), f('b'), f('c'))
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oFA.I === 1 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "6" ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === EPSILON+',a,b,c' ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "1,2,3,4,5,6" ]]></assert>
			<assert><![CDATA[ oFA.T.length === 5 ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
		</assertions>
		<assertions>
			<value><![CDATA[
Automate.setUniqueID( 5 )
var oFA = Automate.and( oFA_LuLa , oFA_LuLa.clone() )
var oDFA = new DFA ( oFA )
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oDFA ]]></assert>
			<assert><![CDATA[ oDFA.test( "LuLuLà" ) === "LuLu" ]]></assert>
			<assert><![CDATA[ oDFA.test( "LàLàLu" ) === "LàLà" ]]></assert>
			<assert><![CDATA[ oDFA.test( "LuLàLà" ) === "LuLà" ]]></assert>
			<assert><![CDATA[ oDFA.test( "LàLuLu" ) === "LàLu" ]]></assert>
		</assertions>
	</test>
	<test name="Automate.or">
		<assertions>
			<value><![CDATA[
Automate.setUniqueID( 1 )
var oFA = Automate.or( f('a'), f('b'), f('c'))
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oFA.I === 7 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "8" ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === EPSILON+',a,b,c' ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "1,2,3,4,5,6,7,8" ]]></assert>
			<assert><![CDATA[ oFA.T.length === 9 ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
		</assertions>
		<assertions>
			<value><![CDATA[
Automate.setUniqueID( 5 )
var oFA = Automate.or( oFA_LuLa, f('A') )
var oDFA = new DFA ( oFA )
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oDFA ]]></assert>
			<assert><![CDATA[ oDFA.test( "LuLuLà" ) === "Lu" ]]></assert>
			<assert><![CDATA[ oDFA.test( "LàLàLu" ) === "Là" ]]></assert>
			<assert><![CDATA[ oDFA.test( "Allô" ) === "A" ]]></assert>
			<assert><![CDATA[ oDFA.test( "Ops" ) === null ]]></assert>
		</assertions>
	</test>
	<test name="Automate.optional">
		<assertions>
			<value><![CDATA[
Automate.setUniqueID( 1 )
var oFA = Automate.optional( f('a'))
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oFA.I === 1 ]]></assert>
			<assert><![CDATA[ oFA.F.toString() === "2" ]]></assert>
			<assert><![CDATA[ oFA.A.toString() === EPSILON+',a' ]]></assert>
			<assert><![CDATA[ oFA.S.toString() === "1,2" ]]></assert>
			<assert><![CDATA[ oFA.T[0].toString() === "1,a,2" ]]></assert>
			<assert><![CDATA[ oFA.T[1].toString() === "1,"+EPSILON+",2" ]]></assert>
			<assert><![CDATA[ ! oFA.M ]]></assert>
		</assertions>
		<assertions>
			<value><![CDATA[
Automate.setUniqueID( 5 )
var oFA = Automate.optional( oFA_LuLa )
var oDFA = new DFA ( oFA )
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oDFA ]]></assert>
			<assert><![CDATA[ oDFA.test( "LuLuLà" ) === "Lu" ]]></assert>
			<assert><![CDATA[ oDFA.test( "LàLàLu" ) === "Là" ]]></assert>
			<assert><![CDATA[ oDFA.test( "Allô" ) === "" ]]></assert>
		</assertions>
	</test>
	<test name="Automate.repeat">
		<assertions>
			<desc>0..n</desc>
			<value><![CDATA[
var oFA = Automate.repeat( f('a'), 0, 'n' )
var oDFA = new DFA( oFA )
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oDFA.test( "b" ) === "" ]]></assert>
			<assert><![CDATA[ oDFA.test( "ab" ) === "a" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aab" ) === "aa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaab" ) === "aaa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaaab" ) === "aaaa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaaaab" ) === "aaaaa" ]]></assert>
		</assertions>
		<assertions>
			<desc>1..n</desc>
			<value><![CDATA[
var oFA = Automate.repeat( f('a'), 1, 'n' )
var oDFA = new DFA( oFA )
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oDFA.test( "b" ) === null ]]></assert>
			<assert><![CDATA[ oDFA.test( "ab" ) === "a" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aab" ) === "aa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaab" ) === "aaa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaaab" ) === "aaaa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaaaab" ) === "aaaaa" ]]></assert>
		</assertions>
		<assertions>
			<desc>2..3</desc>
			<value><![CDATA[
var oFA = Automate.repeat( f('a'), 2, 3 )
var oDFA = new DFA( oFA )
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oDFA.test( "b" ) === null ]]></assert>
			<assert><![CDATA[ oDFA.test( "ab" ) === null ]]></assert>
			<assert><![CDATA[ oDFA.test( "aab" ) === "aa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaab" ) === "aaa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaaab" ) === "aaa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaaaab" ) === "aaa" ]]></assert>
		</assertions>
		<assertions>
			<desc>4</desc>
			<value><![CDATA[
var oFA = Automate.repeat( f('a'), 4 )
var oDFA = new DFA( oFA )
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oDFA.test( "b" ) === null ]]></assert>
			<assert><![CDATA[ oDFA.test( "ab" ) === null ]]></assert>
			<assert><![CDATA[ oDFA.test( "aab" ) === null ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaab" ) === null ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaaab" ) === "aaaa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaaaab" ) === "aaaa" ]]></assert>
		</assertions>
	</test>
	<test name="Automate.repeat0n">
		<assertions>
			<value><![CDATA[
Automate.setUniqueID( 1 )
var oFA = Automate.repeat0n( f('a'))
var oDFA = new DFA( oFA )
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oDFA.test( "b" ) === "" ]]></assert>
			<assert><![CDATA[ oDFA.test( "ab" ) === "a" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aab" ) === "aa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaab" ) === "aaa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaaab" ) === "aaaa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaaaab" ) === "aaaaa" ]]></assert>
		</assertions>
	</test>
	<test name="Automate.repeat1n">
		<assertions>
			<value><![CDATA[
Automate.setUniqueID( 1 )
var oFA = Automate.repeat1n( f('a'))
var oDFA = new DFA( oFA )
			]]></value>
			<assert><![CDATA[ oFA ]]></assert>
			<assert><![CDATA[ oDFA.test( "b" ) === null ]]></assert>
			<assert><![CDATA[ oDFA.test( "ab" ) === "a" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aab" ) === "aa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaab" ) === "aaa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaaab" ) === "aaaa" ]]></assert>
			<assert><![CDATA[ oDFA.test( "aaaaab" ) === "aaaaa" ]]></assert>
		</assertions>
	</test>
</truth>