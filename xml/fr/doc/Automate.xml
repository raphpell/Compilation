<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet type="text/xsl" href="Doc.xsl"?> 
<class name="Automate" language="JavaScript">
	<desc>Fonction générant des automates.</desc>
	<syntax>
		<code><![CDATA[ oAutomate = new Automate ( I, F, A, S, T [, aTokensID ]) ]]></code>
		<arguments>
			<arg name="I" type="Number">
				<desc>État initial.</desc>
			</arg>
			<arg name="F" type="Array">
				<desc>Un ou plusieurs états finaux (tableau de nombre).</desc>
			</arg>
			<arg name="A" type="Array">
				<desc>Alphabet. Tableau contenant :
					<ul>
						<li>des caractères</li>
						<li>des ensembles de caractère négatif ou non</li>
						<li>le symbole EPSILON</li>
						<li>le symbole ANY</li>
					</ul>
				</desc>
			</arg>
			<arg name="S" type="Array">
				<desc>États (tableau de nombre).</desc>
			</arg>
			<arg name="T" type="Array">
				<desc>Transitions. Implémentation d'une transition : un tableau de 3 à 4 éléments.
					<dl>
						<dt>[0] un état initial</dt>
						<dt>[1] un symbole de l'alphabet</dt>
						<dt>[2] un état final</dt>
						<dt>[3] une fonction permettant de transiter d'un état à un autre (cas ensemble de caractère)
								<pre>	var f =function( caractere, etatFinal ){...}</pre></dt>
					</dl>
				</desc>
			</arg>
			<arg name="aTokensID" type="Array" opt="1">
				<desc>Liste des noms de token associée aux états finaux (voir AFD).</desc>
			</arg>
		</arguments>
		<note>...le constructeur ne contrôle pas si les données entrantes sont correctes...</note>
	</syntax>

	<group name="Instance(s) Automate">
		<properties name="Attributs">
			<variable name="I" type="Number">
				<desc>État initial.</desc>
			</variable>
			<variable name="F" type="Array">
				<desc>Un ou plusieurs états finaux.</desc>
			</variable>
			<variable name="A" type="Array">
				<desc>Alphabet.</desc>
			</variable>
			<variable name="S" type="Array">
				<desc>États: tableau de nombre unique.</desc>
			</variable>
			<variable name="T" type="Array">
				<desc>Transitions.</desc>
			</variable>
			<variable name="aTokensID" type="Array">
				<desc>Liste des noms de token associée aux états finaux.</desc>
			</variable>
		</properties>
		<methods name="Méthodes">
			<function name="buildTable">
				<desc>Construit la matrice M de l'automate. Si l'automate est un AFD, ajout:
					<ul>
						<li>préparation à la minimisation du DFA</li>
						<li>possibilité de test du DFA</li>
					</ul>
				</desc>
				<returnValue type="this"></returnValue>
			</function>
			<function name="clone">
				<desc>
					Duplique un automate en renommant les états pour que leur nom soit unique.<br/>
					Voir la fonction <code>Automate.setUniqueID</code>.
				</desc>
				<returnValue type="Automate"></returnValue>
			</function>
			<function name="renameStates">
				<desc>Renomme les états de l'automate. 
					<ul>
						<li>L'état puit doit-être égale à 0.</li>
						<li>Par défaut: 0=état puit, 1=état initial, les autres états commencent à partir de 2.</li>
					</ul>
				</desc>
				<arguments>
					<arg type="Number" name="nStateIDCounter" opt="1">
						<desc>Premier nombre utilisé pour renuméroter les états.</desc>
					</arg>
					<arg type="Boolean" name="bAll" opt="1">
						<desc>Indique si l'état initial et l'état puit doivent-être renumérotés aussi.</desc>
					</arg>
					<arg type="Array" name="aOrder" opt="1">
						<desc>
							Liste de tableau contenant un état et son poids, classée par poids décroissant.
						</desc>
					</arg>
				</arguments>
				<returnValue type="this"></returnValue>
			</function>
		</methods>
	</group>
	<group name="Objet Automate">
		<methods name="Fonctions spéciales">
			<function name="action">
				<desc>
					Créé une fonction <code>f</code> capable de savoir si un caractère fait partie d'un ensemble de caractère.
					<dl>
						<dt>Arguments de la fonction <code>f</code> retournée:</dt>
						<dd>
							<ol>
								<li><code>sChar</code>: un caractère</li>
								<li><code>nState</code>: un numéro d'état.</li>
							</ol>
						</dd>
						<dt>Valeur retournée:</dt>
						<dd>
							<ul>
								<li>si le caractère <code>sChar</code> fait partie de l'ensemble, elle retourne <code>nState</code>.</li>
								<li>Elle retourne <code>-1</code> sinon.</li>
							</ul>
						</dd>
						<dt><code>f.toString()</code> retourne l'ensemble de caractère sous forme d'expression régulière.</dt>
					</dl>
				</desc>
				<arguments>
					<arg type="String" name="sSymbols">
						<desc>Liste de caractères.</desc>
					</arg>
					<arg type="Boolean" name="bNegated" opt="1">
						<desc>Indique si l'ensemble de caractères est négatif.</desc>
					</arg>
				</arguments>
				<returnValue type="Function"></returnValue>
			</function>
			<function name="getUniqueID">
				<desc>Retourne un nombre unique utilisé pour numéroter un état.</desc>
				<returnValue type="Number"></returnValue>
			</function>
			<function name="setUniqueID">
				<desc>Défini le nombre de base utilisé pour définir le numéro d'un état.</desc>
			</function>
			<function name="wrapper">
				<desc>
					Créé un automate depuis une chaine représentant un caractère.
					<dl>
						<dt>Choix spéciaux possibles:</dt>
						<dd>
							<ul>
								<li>Caractères spéciaux: '\\n', '\\t', '\\f', '\\r', '\\v'</li>
								<li>Ensemble de caractères: '\\d', '\\D', '\\s', '\\S', '\\w', '\\W'</li>
							</ul>
						</dd>
						<dt>Si la chaine est un caractère simple ou caractère "échappé" non reconnu, un automate à une transition est créé.</dt>
					</dl>
					Une erreur est lancé sinon...
				</desc>
				<arguments>
					<arg type="String" name="s">
						<desc>Une chaîne de longueur égale à 1 ou 2 ('\\n' à pour longueur 2).</desc>
					</arg>
				</arguments>
				<returnValue type="Automate"></returnValue>
			</function>
		</methods>
		<methods name="Automates basiques">
			<function name="makeEmpty">
				<desc>Créé un automate vide reconnaissant le language vide.</desc>
				<arguments>
					<arg type="Number" name="I" opt="1">
						<desc>Etat initial.</desc>
					</arg>
					<arg type="Number" name="F" opt="1">
						<desc>Etat final.</desc>
					</arg>
				</arguments>
				<returnValue type="Automate"></returnValue>
			</function>
			<function name="makeChar">
				<desc>Créé un automate reconnaissant un caractère.</desc>
				<arguments>
					<arg type="String" name="sChar">
						<desc>Caractère à reconnaître.</desc>
					</arg>
					<arg type="Number" name="I" opt="1">
						<desc>Etat initial.</desc>
					</arg>
					<arg type="Number" name="F" opt="1">
						<desc>Etat final.</desc>
					</arg>
				</arguments>
				<returnValue type="Automate"></returnValue>
			</function>
			<function name="makeAnyChar">
				<desc>Créé un automate reconnaissant n'importe quel caractère.</desc>
				<arguments>
					<arg type="String" name="sChar" opt="1" default="'a'">
						<desc>Caractère à reconnaître.</desc>
					</arg>
					<arg type="Number" name="I" opt="1">
						<desc>Etat initial.</desc>
					</arg>
					<arg type="Number" name="F" opt="1">
						<desc>Etat final.</desc>
					</arg>
				</arguments>
				<returnValue type="Automate"></returnValue>
			</function>
			<function name="makeCharSet">
				<desc>Créé un automate reconnaissant ou non un ensemble de caractère.</desc>
				<arguments>
					<arg type="Array" name="aSet">
						<desc>Ensemble de caractère à reconnaître ou non.</desc>
					</arg>
					<arg type="Boolean" name="bNegated" opt="1" default="false">
						<desc>Indique si l'ensemble est négatif.</desc>
					</arg>
					<arg type="Number" name="I" opt="1">
						<desc>Etat initial.</desc>
					</arg>
					<arg type="Number" name="F" opt="1">
						<desc>Etat final.</desc>
					</arg>
				</arguments>
				<returnValue type="Automate"></returnValue>
			</function>
			<function name="makeCharRange">
				<desc>Créé un automate reconnaissant un intervalle de caractère.</desc>
				<arguments>
					<arg type="String" name="sChar1">
						<desc>Limite de l'ensemble de caractère à reconnaître.</desc>
					</arg>
					<arg type="String" name="sChar2">
						<desc>Limite de l'ensemble de caractère à reconnaître.</desc>
					</arg>
					<arg type="Number" name="I" opt="1">
						<desc>Etat initial.</desc>
					</arg>
					<arg type="Number" name="F" opt="1">
						<desc>Etat final.</desc>
					</arg>
				</arguments>
				<returnValue type="Automate"></returnValue>
			</function>
		</methods>
		<methods name="Opérations basiques">
			<function name="and">
				<desc>.</desc>
				<arguments>
					<arg type="Automate" name="oFA1">
						<desc>.</desc>
					</arg>
					<arg type="Automate" name="oFA2">
						<desc>.</desc>
					</arg>
					<arg type="Automate" name="..." opt="1">
						<desc>.</desc>
					</arg>
				</arguments>
				<returnValue type="Automate"></returnValue>
			</function>
			<function name="optional">
				<desc>.</desc>
				<arguments>
					<arg type="Automate" name="oFA">
						<desc>.</desc>
					</arg>
				</arguments>
				<returnValue type="Automate"></returnValue>
			</function>
			<function name="or">
				<desc>.</desc>
				<arguments>
					<arg type="Automate" name="oFA1">
						<desc>.</desc>
					</arg>
					<arg type="Automate" name="oFA2">
						<desc>.</desc>
					</arg>
					<arg type="Automate" name="..." opt="1">
						<desc>.</desc>
					</arg>
				</arguments>
				<returnValue type="Automate"></returnValue>
			</function>
			<function name="repeat">
				<desc>.</desc>
				<arguments>
					<arg type="Automate" name="oFA">
						<desc>.</desc>
					</arg>
					<arg type="Number" name="n" opt="1">
						<desc>.</desc>
					</arg>
					<arg type="Number" name="m" opt="1">
						<desc>.</desc>
					</arg>
				</arguments>
				<returnValue type="Automate"></returnValue>
			</function>
			<function name="repeat0n">
				<desc>.</desc>
				<arguments>
					<arg type="Automate" name="oFA">
						<desc>.</desc>
					</arg>
				</arguments>
				<returnValue type="Automate"></returnValue>
			</function>
			<function name="repeat1n">
				<desc>.</desc>
				<arguments>
					<arg type="Automate" name="oFA">
						<desc>.</desc>
					</arg>
				</arguments>
				<returnValue type="Automate"></returnValue>
			</function>
		</methods>
		<methods name="Générateur d'automates spéciaux">
			<function name="fromChar">
				<desc>Créé une fonction retournant un automate à une transition pour un caractère.</desc>
				<arguments>
					<arg type="String" name="sChar">
						<desc>Un caractère.</desc>
					</arg>
				</arguments>
				<returnValue type="Function"></returnValue>
			</function>
			<function name="fromCharClass">
				<desc>Créé une fonction retournant un automate à une transition pour un ensemble de caractère négatif ou non.</desc>
				<arguments>
					<arg type="Array" name="aSet">
						<desc>Liste de caractères.</desc>
					</arg>
					<arg type="Boolean" name="bNegated" opt="1">
						<desc>Indique si l'ensemble de caractères est négatif.</desc>
					</arg>
				</arguments>
				<returnValue type="Function"></returnValue>
			</function>
		</methods>
		<methods name="Automates spéciaux">
			<function name="['\\n']">
				<returnValue type="Automate"></returnValue>
			</function>
			<function name="['\\t']">
				<returnValue type="Automate"></returnValue>
			</function>
			<function name="['\\f']">
				<returnValue type="Automate"></returnValue>
			</function>
			<function name="['\\r']">
				<returnValue type="Automate"></returnValue>
			</function>
			<function name="['\\v']">
				<returnValue type="Automate"></returnValue>
			</function>
			<function name="['\\d']">
				<returnValue type="Automate"></returnValue>
			</function>
			<function name="['\\D']">
				<returnValue type="Automate"></returnValue>
			</function>
			<function name="['\\s']">
				<returnValue type="Automate"></returnValue>
			</function>
			<function name="['\\S']">
				<returnValue type="Automate"></returnValue>
			</function>
			<function name="['\\w']">
				<returnValue type="Automate"></returnValue>
			</function>
			<function name="['\\W']">
				<returnValue type="Automate"></returnValue>
			</function>
		</methods>
	</group>
</class>