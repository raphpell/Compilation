<html>
<head>
	<title>Analyse syntaxique: readToken</title>
	<link rel="stylesheet" type="text/css" href="src/regexp/nodeStyle.css">
	<link rel="stylesheet" type="text/css" href="src/regexp/styles.css">
	<style>
INPUT[type=button]{
	font-weight: bold;
	padding:.25em 1em;
	}
#eInput {
	height: 2em;
	width: 100%;
	}
FIELDSET {
	float: left;
	margin: 0 1em 1em 0;
	}
FIELDSET DL{
	margin: 0;
	}
#eScanResult {
	clear: both;
	}
.symbolsTable, .parsingTable { float: left; }
TABLE { float: left; margin-left: 1em; }
TABLE TD {
	border: 1px solid #000;
	border-width: 1px 1px 0 0;
	}
TABLE TR,
TABLE COL {
	transition: 500ms ease;
	}
.highlight {
	background: lightskyblue;
	}
#eActions { float:left; margin-left: 1em; }
</style>
</head>
<body spellcheck="false">
<a href="index.htm">Index</a>

<h1>Analyse syntaxique: readToken</h1>

<label for="eInput">Expression régulière : </label><br>
<textarea id="eInput">-(([a-z]a+)|\db?)|1{2}c{1,4}|[^B]d{2,}|.e*[^\-^$\\.*+?()[\]}{|]</textarea>

<fieldset><legend>Actions</legend>
	<dl>
		<dt><input type="hidden" id="eLexeme" value="HTMLElement"></dt>
		<dt><input type="button" id="eBtnScan" value="scan()"></dt>
		<dt><input type="button" id="eBtnParse" value="parse()"></dt>
		<dt><input type="button" id="eBtnReadToken" value="parser: readToken()"></dt>
	</dl>
</fieldset>
<fieldset><legend>Divers</legend>
	<dl>
		<dt>Temps: <input type="text" id="eTime" value="250"></dt>
		<dt><input type="checkbox" id="eAstRegExp">
			<label for="eAstRegExp">RegExp AST</label></dt>
		<dt><input type="checkbox" id="eAstCharClass">
			<label for="eAstCharClass">CharClass AST</label></dt>
		<dt><input type="checkbox" id="eAstQuantifier">
			<label for="eAstQuantifier">Quantifier AST</label></dt>
	</dl>
</fieldset>
<fieldset><legend>Parser</legend>
	<dl>
		<dt>Etat: <span id="eAction">s1</span></dt>
		<dt>Symbole: <span id="eToken">...</span></dt>
		<dt>Piles: <span id="eStack">...</span></dt>
	</dl>
</fieldset>

<pre id="eScanResult"></pre>
<pre id="eParseResult"></pre>
<h2>REGEXP Tables</h2>
<pre id="eEngineTable"></pre>
<pre id="eActions"></pre>


<!-- FRAMEWORK... -->
<script src="js/framework.js"></script>
<script src="js/shared.js"></script>
<script src="widget/Stats/scripts.js"></script>

<!-- LEXER NODES -->
<script src="src/regexp/node.js"></script>
<!-- <script>
var getElementsByLine =function( nLine ){
	var a=[]
	for(var e=this.firstChild; e; e=e.nextSibling )
		if( e.oValue.lineStart<=nLine && nLine<=e.oValue.lineEnd )
			a.push(e)
	return a
	}
var getHTMLEnd =function( o ){ return '</b>' }
var getHTMLStart =function( o, bTitle ){
	return bTitle && o.value
		? '<b class="' + o.css + '" title="' + valueToString( o ) + '">'
		: '<b class="' + o.css + '">'
	}
var replaceSpecialHTML =function( s ){
	return s.str_replace( ['&','<','>'], ['&amp;','&lt;','&gt;'])
	}
var setTitle =function(){ this.title = valueToString( this.oValue )}
var valueToString =function(o){
	return JSON.stringify( o, 'token,parentToken,css,index,lineStart,lineEnd'.split(','), " " ).str_replace('"', '')
	}

// var Lexeme
var createLexeme =function( bClassName, bTitle, bInnerHTML, bByLine ){
	var s = '{}'
	switch( eLexeme.value ){
		case 'HTMLElement': s='document.createElement(o.token)'; break;
		case 'ObjectNode': s='new Node(o.token)'; break;
		}
	Lexeme = new Function ( 'o', 
		'var e = '+ s +';'
		+'e.oValue=o;'
		+( bByLine ? 'e.getElementsByLine=getElementsByLine;' : '' )
		+( bClassName ? 'e.className=o.css;' : '' )
		+( bTitle ? 'e.setTitle=setTitle;e.setTitle();' : '' )
		+( bInnerHTML ? "if( o.value ) e.innerHTML = o.value.str_replace( ['&','<','>'], ['&amp;','&lt;','&gt;']);" : '' )
		+'return e;'
		)
	}
// createLexeme(1,1,1,0)
</script> -->

<!-- LEXERS + PARSER -->
<script src="js/lexer.class.js"></script>
<script src="js/lexer.automaton.js"></script>
<script src="js/lexer.automaton.modules.js"></script>
<script src="src/regexp/lexer.js"></script>
<script src="src/regexp/parser.js"></script>
<script src="js/parserLR.js"></script>
<script>
ParserLR.Node = Lexeme
AST ={
	nullify :function( s ){
		if( RegExpParser[s].AST ) RegExpParser[s]._AST = RegExpParser[s].AST
		RegExpParser[s].AST = null
		},
	define :function( s ){
		if( ! RegExpParser[s].AST )
			RegExpParser[s].AST = RegExpParser[s]._AST
		}
	}
AST.nullify('REGEXP')
AST.nullify('CHARCLASS')
AST.nullify('QUANTIFIER')
function switchAST ( s ){
	return function(){
		AST[ this.checked ? 'define' : 'nullify' ]( s )
		var b = ! eAstRegExp.checked
		eAstCharClass.disabled = b
		eAstQuantifier.disabled = b
		}
	}
</script>

<!-- CODE -->
<script>
var eLexer, oParser, eParsed 

var aStackInterval = []
Time={
	nID : null,
	set:function(){
		window.clearInterval( Time.nID )
		Time.nID = window.setInterval( function(){
			if( aStackInterval.length ) aStackInterval.shift()()
			}, parseInt( eTime.value ))
		}
	}

Tables=(function(){
	var aTables, eLastSymbol, eLastState, eLastLastState, eLastCol
	return {
		show :function( ENGINE ){
		// Table des actions
			Bufferize.init( '<table class="parsingTable">' )
			Bufferize('<colgroup><col>')
			var o = ENGINE.SYMBOLS
			for( sSymbol in o )
				if( o[sSymbol].constructor==Number ){
					Bufferize( '<col id="Col'+ sSymbol +'">' )
					}
			Bufferize('</colgroup>')
			Bufferize( '<thead>' )
			Bufferize( '<tr><td></td>' )
			var o = ENGINE.SYMBOLS
			var nSymbolsCount = 0
			for( sSymbol in o )
				if( o[sSymbol].constructor==Number ){
					Bufferize( "<th>"+ o[sSymbol] +"</th>" )
					nSymbolsCount++
					}
			Bufferize( '</tr>' )
			Bufferize( '</thead>' )
			Bufferize( '<tbody>' )
			var o = ENGINE.MATRICE
			for( sState in o )
				if( o[sState].constructor==Array ){
					var a = o[sState].concat([])
					a.length = nSymbolsCount
					Bufferize( '<tr id="State'+ sState +'"><th>'+ sState +"</th>" )
					Bufferize( "<td>"+ a.join('</td><td>') +"</td>" )
					Bufferize( "</tr>" )
					}
			Bufferize( '</tbody></table>' )
		// Table des symboles
			Bufferize( '<table class="symbolsTable">' )
			var o = ENGINE.SYMBOLS
			for( sSymbol in o )
				if( o[sSymbol].constructor==Number )
					Bufferize( '<tr id="Symbol'+sSymbol+'"><th>'+ sSymbol +"</th><td>"+ o[sSymbol] +"</td></tr>" )
			eEngineTable.innerHTML =  Bufferize( "</table>" )
			aTables = eEngineTable.getElementsByTagName('table')
			eLastSymbol = eLastState = eLastCol = null
			Tables.highlightPosition(1)
			},
		highlightSymbol :function( sSymbol ){
			if( eLastSymbol ) eLastSymbol.className = ''
			if( eLastSymbol = _('Symbol'+ sSymbol ))
				eLastSymbol.className = 'highlight'
			},
		highlightPosition :function( nState, sSymbol, sAction ){
			var sStack = oParser.aStack.toString()+','+sAction
				
			aStackInterval.push( function(){
				if( eLastState ) eLastState.className = ''
				if( nState ){
					eLastState = _('State'+ nState )
					eLastState.className = 'highlight'
					}
				if( eLastCol ) eLastCol.className = ''
				if( sSymbol ){
					if( eLastCol = _('Col'+ sSymbol ))
						eLastCol.className = 'highlight'
					Tables.highlightSymbol( eToken.innerHTML = sSymbol )
					}
				if( sAction ){
					sReduction = ''
					if( sAction.charAt(0)=='r' ){
						var ProdID = sAction.substring(1)
						, P = oParser.PRODUCTIONS[ ProdID ]
						, sReduction = ', ('+ P[0] +' → '+ P[1].join(' ') +')'
						}
					eAction.innerHTML = sAction
					eActions.innerHTML =
						'M( '+ nState +', '+ sSymbol +' ) = '+ sAction +'    '+ sReduction +'\n'
						+ eActions.innerHTML
					eStack.innerHTML = sStack
					}
				})
			}
		}
	})()
	
var scan =function(){
	eScanResult.innerHTML = ''
	try{
		eLexer = AutomatonLexer( eInput.value, 'RegExp' )
		eScanResult.appendChild( eLexer )
		oParser = new ParserLR ( RegExpParser.REGEXP )
		oParser._getAction = oParser.getAction
		oParser.getAction = function( nState, sSymbol ){
			var sAction = oParser._getAction( nState, sSymbol )
			Tables.highlightPosition( nState, sSymbol, sAction )
			return sAction
			}
		View.resetInfo()
		Tables.show( RegExpParser.REGEXP )
	}catch(e){
		eScanResult.innerHTML = e.message + '<br>'
		if( e.fileName ) eScanResult.innerHTML += '<br>fichier: '+ e.fileName.split('/').pop()
		if( e.lineNumber ) eScanResult.innerHTML += '<br>ligne: '+ e.lineNumber
		}
	}
var parse =function(){
	if( ! eLexer ) return ;
	eScanResult.innerHTML = eParseResult.innerHTML = ''
	eParseResult.appendChild( ParserLR.parse( eLexer, RegExpParser.REGEXP ))
	}
var readToken =function(){
	if( aStackInterval.length || ! eLexer ) return ;
	if( eLexer.firstChild ){
		eActions.innerHTML = ''
		oParser.readToken( eLexer.removeChild( eLexer.firstChild ))
		eParseResult.innerHTML = ''
		for(var i=0; oParser.aSymbols[i]; i++)
			eParseResult.appendChild( oParser.aSymbols[i] )
		}
	else if( ! oParser.bEnd ){
		oParser.bEnd = true
		aStackInterval.push( function(){
			var e = oParser.getResult()
			eParseResult.innerHTML = ''
			eParseResult.appendChild( e )
			})
		}
	}

View ={
	resetInfo :function(){
		eAction.innerHTML = 's1'
		eToken.innerHTML = '...'
		eStack.innerHTML = '...'
		eParseResult.innerHTML = ''
		}
	}
</script>

<!-- DTHML -->
<script>
_( 'eInput,eLexeme,eBtnScan,eBtnParse,eBtnReadToken,eScanResult,eParseResult' )
_( 'eAction,eToken,eStack,eEngineTable,eActions,eTime' )
_( 'eAstRegExp,eAstCharClass,eAstQuantifier' )

Events.add(
	'click',
		eBtnScan, scan,
		eBtnParse, parse,
		eBtnReadToken, readToken,
	'change',
		eAstRegExp, switchAST("REGEXP"),
		eAstCharClass, switchAST("CHARCLASS"),
		eAstQuantifier, switchAST("QUANTIFIER"),
	'keyup',
		eTime, Time.set
	)
	
Time.set()
AST[ eAstRegExp.checked ? 'define' : 'nullify' ]('REGEXP')
AST[ eAstCharClass.checked ? 'define' : 'nullify' ]('CHARCLASS')
AST[ eAstQuantifier.checked ? 'define' : 'nullify' ]('QUANTIFIER')
eAstRegExp.onchange()
</script>
</body>
</html>