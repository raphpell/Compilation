<html>
	<head>
		<title>Les Lexers</title>
		<style>
UL {
	list-style-position: inside;
	padding: 0 1em;
	margin: 1em 0;
	}
LI {
	padding: 0 1em;
	}
.lexer {
	background: #EEE;
	border: 1px solid #666;
	float: left;
	list-style-type: none;
	margin: 0 .5em 2em;
	padding: .5em 1em;
	white-space: nowrap;
	}
UL + P {
	clear: left;
	}
		</style>
	</head>
	<body>
<a href="index.htm">Index</a>

<h1>Les Lexers</h1>

<p>Il y a trois différents lexers testés. Mais il n'y en a que deux à privilégier.</p>

<h2>Performance</h2>
<p>Elle est mesurée sur deux méthodes :</p>
<ul>
	<li><b>readToken</b>: <a href="Lexers.performance.readToken.htm">vitesse de lecture des tokens</a> pour un lexer.</li>
	<li><b>scan</b>: comparaison de la <a href="Lexers.performance.scan.htm">vitesse de lecture totale</a> des lexers.</li>
</ul>
<p>
	L'<a href="Lexers.result.comparaison.htm">équivalence des résultats</a> des analyses lexicales est comparée 
	afin d'assurer des mesures dans des conditions identiques.
</p>
<p>La performance est dependante du <a href="Node.htm">LexerNode</a> utilisé.</p>


<h2>Description</h2>
<p style="margin-bottom:0;">
	Ils réalisent tous une analyse à <a href="Lexers.result.comparaison.htm">plusieurs niveaux</a>: un <i>arbre lexicale</i> est créé.<br>
</p>


<h3>Les deux lexers à privilégier</h3>
<ul>
	<li>Parcourent le texte une et une seule fois...</li>
	<li>Permettent de:
		<ol>
			<li>rescanner un token (à éviter si possible !): il en fait un token parent.</li>
			<li>détecter le début et la fin d'un token parent.</li>
		</ol>
	</li>
	<li>Utilisent une liste d'<i>objet reconnaissant des tokens</i>.<br>
		<small><b>ATTENTION</b></small>: Premier objet arrivé, premier servi.
		<ol>
			<li>Un ordre est requis (mots clés avant identifiant, ...)</li>
			<li>Les objets trouvés le plus souvant doivent être classés en tête :
				<i>amélioration des performances</i>.</li>
		</ol>
	</li>
</ul>

<p>Comparaisons des deux lexers :</p>
<ul>
	<li class="lexer"><b>Automaton Lexer</b>. <br>
		Utilise des AFD : Il reconnaisse 1 à plusieurs tokens.
		<ul>
			<li style="color:red;">Lexer plus lent.</li>
			<li style="color:red;">Code source très grand.</li>
			<li style="color:green;">Analyse partielle implémenté (<a href="LexerAutomaton.incremental.htm">aperçu</a>).</li>
			<li style="color:green;">Le plus long token trouvé est toujours retourné.</li>
		</ul></li>
	<li class="lexer"><b>Multiple RegExp Lexer</b>. <br>
		Utilise des ER : Elle reconnaisse 1 et 1 seul token.
		<ul>
			<li style="color:green;">Lexer plus rapide.</li>
			<li style="color:green;">Code source beaucoup plus petit.</li>
			<li style="color:red;">Analyse partielle non implémentée.</li>
			<li style="color:red;">Premier arrivé, premier servi.</li>
		</ul></li>
</ul>

<p></p>
<h3>Le dernier à éviter impérativement</h3>
<ul>
	<li class="lexer"><b>"1 RegExp" Lexer</b> <sup style="color:red;">deprecated</sup>
		<ul>
			<li>Une seule grande expression régulière est créée pour parcourir le texte.</li>
			<li>Le défaut: quand un mot est trouvé il faut déterminé son type.</li>
			<li>Pour cela il faut parcourir toutes les expressions régulières (celles utilisées pour créer la grande).</li>
			<li>Les expressions régulières utilisées pour créer la grande ont une organisation spéciale... (voir ci-dessus!)</li>
			<li>J'ai abandonné son utilisation.</li>
		</ul></li>
</ul>

	</body>
</html>